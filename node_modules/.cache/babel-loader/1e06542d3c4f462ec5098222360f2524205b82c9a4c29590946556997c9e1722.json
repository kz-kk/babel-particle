{"ast":null,"code":"var _jsxFileName = \"/Users/kasaikazunobu/project/ai/babel/ripple/3d-ripple-animation/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport './App.css';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useFrame, useLoader, useThree } from '@react-three/fiber';\nimport { Suspense, useCallback, useMemo, useRef } from 'react';\nimport { AxesHelper, GridHelper } from 'three';\nimport circleImg from './assets/circle.png'; // テクスチャのインポート\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CameraControls() {\n  _s();\n  const {\n    camera,\n    gl: {\n      domElement\n    }\n  } = useThree();\n  const controlsRef = useRef();\n  useFrame(() => controlsRef.current.update());\n  return /*#__PURE__*/_jsxDEV(\"orbitControls\", {\n    ref: controlsRef,\n    args: [camera, domElement],\n    autoRotate: true,\n    autoRotateSpeed: -0.2\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(CameraControls, \"OfZJ3lY+8UowfJQr79ITTGaLLH4=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = CameraControls;\nfunction MeshSurface() {\n  _s2();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const meshRef = useRef();\n  const tRef = useRef(0);\n  const speed = 2; // 波の速度\n  const frequency = 0.1; // 波の周波数\n  const amplitude = 2; // 波の振幅\n\n  useFrame((state, delta) => {\n    tRef.current += delta * speed;\n    const positions = meshRef.current.geometry.attributes.position.array;\n    const vertex = new THREE.Vector3();\n    for (let i = 0; i < positions.length; i += 3) {\n      vertex.fromArray(positions, i);\n      const distance = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      positions[i + 1] = Math.sin(distance * frequency - tRef.current) * amplitude;\n    }\n    meshRef.current.geometry.attributes.position.needsUpdate = true;\n    meshRef.current.geometry.computeVertexNormals();\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    rotation: [-Math.PI / 2, 0, 0],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [300, 300, 100, 100]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: imgTex,\n      color: 0xFFFFFF,\n      side: THREE.DoubleSide,\n      wireframe: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n// function MeshSurface() {\n//   const imgTex = useLoader(THREE.TextureLoader, circleImg);\n//   const bufferRef = useRef();\n\n//   const tRef = useRef(0);\n//   const f = 0.002;\n//   const a = 1;\n\n//   const graph = useCallback(\n//     (x, z) => {\n//       return Math.sin(f * (x ** 2 + z ** 2 + tRef.current)) * a;\n//     },\n//     [f, a]\n//   );\n\n//   const count = 200;\n//   const sep = 1.5;\n\n//   const positions = useMemo(() => {\n//     const positions = [];\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         const y = graph(x, z);\n//         positions.push(x, y, z);\n//       }\n//     }\n//     return new Float32Array(positions);\n//   }, [count, sep, graph]);\n\n//   const indices = useMemo(() => {\n//     const indices = [];\n//     for (let xi = 0; xi < count - 1; xi++) {\n//       for (let zi = 0; zi < count - 1; zi++) {\n//         const a = xi * count + zi;\n//         const b = xi * count + zi + 1;\n//         const c = (xi + 1) * count + zi + 1;\n//         const d = (xi + 1) * count + zi;\n//         indices.push(a, b, d);\n//         indices.push(b, c, d);\n//       }\n//     }\n//     return new Uint16Array(indices);\n//   }, [count]);\n\n//   useFrame(() => {\n//     tRef.current += 15;\n//     const positionsArray = bufferRef.current.array;\n//     let i = 0;\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         positionsArray[i + 1] = graph(x, z);\n//         i += 3;\n//       }\n//     }\n//     bufferRef.current.needsUpdate = true;\n//   });\n\n//   return (\n//     <mesh>\n//       <bufferGeometry attach=\"geometry\">\n//         <bufferAttribute\n//           ref={bufferRef}\n//           attachObject={['attributes', 'position']}\n//           array={positions}\n//           count={positions.length / 3}\n//           itemSize={3}\n//         />\n//         <bufferAttribute\n//           attach=\"index\"\n//           array={indices}\n//           count={indices.length}\n//           itemSize={1}\n//         />\n//       </bufferGeometry>\n\n//       <meshStandardMaterial\n//         attach=\"material\"\n//         map={imgTex}\n//         color={0xFFFFFF}\n//         side={THREE.DoubleSide}\n//         wireframe={false}\n//       />\n//     </mesh>\n//   );\n// }\n_s2(MeshSurface, \"81yg2XaPC+PuRivYvl7QlDoLyj4=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c2 = MeshSurface;\nfunction AnimationCanvas() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    colorManagement: false,\n    camera: {\n      position: [0, 100, 200],\n      fov: 75\n    },\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: [/*#__PURE__*/_jsxDEV(MeshSurface, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10],\n        intensity: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"axesHelper\", {\n        args: [100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"gridHelper\", {\n        args: [200, 20]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CameraControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_c3 = AnimationCanvas;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"anim\",\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(AnimationCanvas, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CameraControls\");\n$RefreshReg$(_c2, \"MeshSurface\");\n$RefreshReg$(_c3, \"AnimationCanvas\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["THREE","OrbitControls","Canvas","extend","useFrame","useLoader","useThree","Suspense","useCallback","useMemo","useRef","AxesHelper","GridHelper","circleImg","jsxDEV","_jsxDEV","CameraControls","_s","camera","gl","domElement","controlsRef","current","update","ref","args","autoRotate","autoRotateSpeed","fileName","_jsxFileName","lineNumber","columnNumber","_c","MeshSurface","_s2","imgTex","TextureLoader","meshRef","tRef","speed","frequency","amplitude","state","delta","positions","geometry","attributes","position","array","vertex","Vector3","i","length","fromArray","distance","Math","sqrt","x","z","sin","needsUpdate","computeVertexNormals","rotation","PI","children","map","color","side","DoubleSide","wireframe","_c2","AnimationCanvas","colorManagement","fov","fallback","intensity","_c3","App","className","_c4","$RefreshReg$"],"sources":["/Users/kasaikazunobu/project/ai/babel/ripple/3d-ripple-animation/src/App.js"],"sourcesContent":["import './App.css';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Canvas, extend, useFrame, useLoader, useThree } from '@react-three/fiber';\nimport { Suspense, useCallback, useMemo, useRef } from 'react';\nimport { AxesHelper, GridHelper } from 'three';\nimport circleImg from './assets/circle.png'; // テクスチャのインポート\n\n\n\nfunction CameraControls(){\n  const {\n    camera,\n    gl: {domElement}\n  } = useThree();\n\n  const controlsRef = useRef();\n  useFrame(() => controlsRef.current.update())\n\n  return (\n    <orbitControls\n      ref={controlsRef}\n      args={[camera, domElement]}\n      autoRotate\n      autoRotateSpeed={-0.2}\n    />\n  );\n}\n\nfunction MeshSurface() {\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const meshRef = useRef();\n\n  const tRef = useRef(0);\n  const speed = 2; // 波の速度\n  const frequency = 0.1; // 波の周波数\n  const amplitude = 2; // 波の振幅\n\n  useFrame((state, delta) => {\n    tRef.current += delta * speed;\n\n    const positions = meshRef.current.geometry.attributes.position.array;\n    const vertex = new THREE.Vector3();\n\n    for (let i = 0; i < positions.length; i += 3) {\n      vertex.fromArray(positions, i);\n      const distance = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      positions[i + 1] = Math.sin(distance * frequency - tRef.current) * amplitude;\n    }\n\n    meshRef.current.geometry.attributes.position.needsUpdate = true;\n    meshRef.current.geometry.computeVertexNormals();\n  });\n\n  return (\n    <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]}>\n      <planeGeometry args={[300, 300, 100, 100]} />\n      <meshStandardMaterial\n        map={imgTex}\n        color={0xFFFFFF}\n        side={THREE.DoubleSide}\n        wireframe={false}\n      />\n    </mesh>\n  );\n}\n\n// function MeshSurface() {\n//   const imgTex = useLoader(THREE.TextureLoader, circleImg);\n//   const bufferRef = useRef();\n\n//   const tRef = useRef(0);\n//   const f = 0.002;\n//   const a = 1;\n\n//   const graph = useCallback(\n//     (x, z) => {\n//       return Math.sin(f * (x ** 2 + z ** 2 + tRef.current)) * a;\n//     },\n//     [f, a]\n//   );\n\n//   const count = 200;\n//   const sep = 1.5;\n\n//   const positions = useMemo(() => {\n//     const positions = [];\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         const y = graph(x, z);\n//         positions.push(x, y, z);\n//       }\n//     }\n//     return new Float32Array(positions);\n//   }, [count, sep, graph]);\n\n//   const indices = useMemo(() => {\n//     const indices = [];\n//     for (let xi = 0; xi < count - 1; xi++) {\n//       for (let zi = 0; zi < count - 1; zi++) {\n//         const a = xi * count + zi;\n//         const b = xi * count + zi + 1;\n//         const c = (xi + 1) * count + zi + 1;\n//         const d = (xi + 1) * count + zi;\n//         indices.push(a, b, d);\n//         indices.push(b, c, d);\n//       }\n//     }\n//     return new Uint16Array(indices);\n//   }, [count]);\n\n//   useFrame(() => {\n//     tRef.current += 15;\n//     const positionsArray = bufferRef.current.array;\n//     let i = 0;\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         positionsArray[i + 1] = graph(x, z);\n//         i += 3;\n//       }\n//     }\n//     bufferRef.current.needsUpdate = true;\n//   });\n\n//   return (\n//     <mesh>\n//       <bufferGeometry attach=\"geometry\">\n//         <bufferAttribute\n//           ref={bufferRef}\n//           attachObject={['attributes', 'position']}\n//           array={positions}\n//           count={positions.length / 3}\n//           itemSize={3}\n//         />\n//         <bufferAttribute\n//           attach=\"index\"\n//           array={indices}\n//           count={indices.length}\n//           itemSize={1}\n//         />\n//       </bufferGeometry>\n\n//       <meshStandardMaterial\n//         attach=\"material\"\n//         map={imgTex}\n//         color={0xFFFFFF}\n//         side={THREE.DoubleSide}\n//         wireframe={false}\n//       />\n//     </mesh>\n//   );\n// }\nfunction AnimationCanvas() {\n  return (\n    <Canvas colorManagement={false} camera={{ position: [0, 100, 200], fov: 75 }}>\n      <Suspense fallback={null}>\n        <MeshSurface />\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} intensity={1} />\n        <axesHelper args={[100]} />\n        <gridHelper args={[200, 20]} />\n      </Suspense>\n      <CameraControls />\n    </Canvas>\n  );\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"anim\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <AnimationCanvas />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { extend, useThree } from \"@react-three/fiber\";\nconst resolveRef = ref => typeof ref === \"object\" && ref != null && \"current\" in ref ? ref.current : ref;\nlet i = 0;\nconst components = /* @__PURE__ */new WeakMap();\nconst wrapEffect = (effect, defaults) => /* @__PURE__ */React.forwardRef(function Effect({\n  blendFunction = defaults == null ? void 0 : defaults.blendFunction,\n  opacity = defaults == null ? void 0 : defaults.opacity,\n  ...props\n}, ref) {\n  let Component = components.get(effect);\n  if (!Component) {\n    const key = `@react-three/postprocessing/${effect.name}-${i++}`;\n    extend({\n      [key]: effect\n    });\n    components.set(effect, Component = key);\n  }\n  const camera = useThree(state => state.camera);\n  const args = React.useMemo(() => {\n    var _a, _b;\n    return [...((_a = defaults == null ? void 0 : defaults.args) != null ? _a : []), ...((_b = props.args) != null ? _b : [{\n      ...defaults,\n      ...props\n    }])];\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [JSON.stringify(props)]);\n  return /* @__PURE__ */jsx(Component, {\n    camera,\n    \"blendMode-blendFunction\": blendFunction,\n    \"blendMode-opacity-value\": opacity,\n    ...props,\n    ref,\n    args\n  });\n});\nconst useVector2 = (props, key) => {\n  const value = props[key];\n  return React.useMemo(() => {\n    if (typeof value === \"number\") return new THREE.Vector2(value, value);else if (value) return new THREE.Vector2(...value);else return new THREE.Vector2();\n  }, [value]);\n};\nexport { resolveRef, useVector2, wrapEffect };","map":{"version":3,"names":["resolveRef","ref","current","i","components","WeakMap","wrapEffect","effect","defaults","React","forwardRef","Effect","blendFunction","opacity","props","Component","get","key","name","extend","set","camera","useThree","state","args","useMemo","_a","_b","JSON","stringify","jsx","useVector2","value","THREE","Vector2"],"sources":["/Users/kasaikazunobu/project/babel/babel-project/node_modules/@react-three/postprocessing/src/util.tsx"],"sourcesContent":["import React, { MutableRefObject } from 'react'\nimport { Vector2 } from 'three'\nimport * as THREE from 'three'\nimport { type ReactThreeFiber, extend, useThree } from '@react-three/fiber'\nimport type { Effect, BlendFunction } from 'postprocessing'\n\nexport const resolveRef = <T,>(ref: T | React.MutableRefObject<T>) =>\n  typeof ref === 'object' && ref != null && 'current' in ref ? ref.current : ref\n\nexport type EffectConstructor = new (...args: any[]) => Effect\n\nexport type EffectProps<T extends EffectConstructor> = ReactThreeFiber.Node<\n  T extends Function ? T['prototype'] : InstanceType<T>,\n  T\n> &\n  ConstructorParameters<T>[0] & {\n    blendFunction?: BlendFunction\n    opacity?: number\n  }\n\nlet i = 0\nconst components = new WeakMap<EffectConstructor, React.ExoticComponent<any> | string>()\n\nexport const wrapEffect = <T extends EffectConstructor>(effect: T, defaults?: EffectProps<T>) =>\n  /* @__PURE__ */ React.forwardRef<T, EffectProps<T>>(function Effect(\n    { blendFunction = defaults?.blendFunction, opacity = defaults?.opacity, ...props },\n    ref\n  ) {\n    let Component = components.get(effect)\n    if (!Component) {\n      const key = `@react-three/postprocessing/${effect.name}-${i++}`\n      extend({ [key]: effect })\n      components.set(effect, (Component = key))\n    }\n\n    const camera = useThree((state) => state.camera)\n    const args = React.useMemo(\n      () => [...((defaults?.args ?? []) as any[]), ...((props.args ?? [{ ...defaults, ...props }]) as any[])],\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [JSON.stringify(props)]\n    )\n\n    return (\n      <Component\n        camera={camera}\n        blendMode-blendFunction={blendFunction}\n        blendMode-opacity-value={opacity}\n        {...props}\n        ref={ref}\n        args={args}\n      />\n    )\n  })\n\nexport const useVector2 = (props: Record<string, unknown>, key: string): THREE.Vector2 => {\n  const value = props[key] as ReactThreeFiber.Vector2 | undefined\n  return React.useMemo(() => {\n    if (typeof value === 'number') return new THREE.Vector2(value, value)\n    else if (value) return new THREE.Vector2(...(value as THREE.Vector2Tuple))\n    else return new THREE.Vector2()\n  }, [value])\n}\n"],"mappings":";;;;AAMa,MAAAA,UAAA,GAAkBC,GAAA,IAC7B,OAAOA,GAAA,KAAQ,YAAYA,GAAA,IAAO,QAAQ,aAAaA,GAAA,GAAMA,GAAA,CAAIC,OAAA,GAAUD,GAAA;AAa7E,IAAIE,CAAA,GAAI;AACR,MAAMC,UAAA,sBAAiBC,OAAA;AAEhB,MAAMC,UAAA,GAAaA,CAA8BC,MAAA,EAAWC,QAAA,KAC3C,eAAAC,KAAA,CAAAC,UAAA,CAA8B,SAASC,OAC3D;EAAEC,aAAA,GAAgBJ,QAAA,oBAAAA,QAAA,CAAUI,aAAA;EAAeC,OAAA,GAAUL,QAAA,oBAAAA,QAAA,CAAUK,OAAA;EAAS,GAAGC;AAAA,GAC3Eb,GAAA,EACA;EACI,IAAAc,SAAA,GAAYX,UAAA,CAAWY,GAAA,CAAIT,MAAM;EACrC,IAAI,CAACQ,SAAA,EAAW;IACR,MAAAE,GAAA,GAAM,+BAA+BV,MAAA,CAAOW,IAAA,IAAQf,CAAA;IAC1DgB,MAAA,CAAO;MAAE,CAACF,GAAG,GAAGV;IAAQ;IACbH,UAAA,CAAAgB,GAAA,CAAIb,MAAA,EAASQ,SAAA,GAAYE,GAAI;EAC1C;EAEA,MAAMI,MAAA,GAASC,QAAA,CAAUC,KAAA,IAAUA,KAAA,CAAMF,MAAM;EAC/C,MAAMG,IAAA,GAAOf,KAAA,CAAMgB,OAAA,CACjB;;IAAM,QAAC,KAAKC,EAAA,GAAAlB,QAAA,oBAAAA,QAAA,CAAUgB,IAAA,KAAV,OAAAE,EAAA,GAAkB,EAAe,QAAKC,EAAA,GAAAb,KAAA,CAAMU,IAAA,KAAN,OAAAG,EAAA,GAAc,CAAC;MAAE,GAAGnB,QAAA;MAAU,GAAGM;IAAO,EAAY;EAAA;EAAA;EAEtG,CAACc,IAAA,CAAKC,SAAA,CAAUf,KAAK,CAAC;EAItB,sBAAAgB,GAAA,CAACf,SAAA;IACCM,MAAA;IACA,2BAAyBT,aAAA;IACzB,2BAAyBC,OAAA;IACxB,GAAGC,KAAA;IACJb,GAAA;IACAuB;EAAA;AAGN,CAAC;AAEU,MAAAO,UAAA,GAAaA,CAACjB,KAAA,EAAgCG,GAAA,KAA+B;EAClF,MAAAe,KAAA,GAAQlB,KAAA,CAAMG,GAAG;EAChB,OAAAR,KAAA,CAAMgB,OAAA,CAAQ,MAAM;IACzB,IAAI,OAAOO,KAAA,KAAU,UAAU,OAAO,IAAIC,KAAA,CAAMC,OAAA,CAAQF,KAAA,EAAOA,KAAK,WAC3DA,KAAA,EAAO,OAAO,IAAIC,KAAA,CAAMC,OAAA,CAAQ,GAAIF,KAA4B,OAC7D,WAAIC,KAAA,CAAMC,OAAA;EAAQ,GAC7B,CAACF,KAAK,CAAC;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
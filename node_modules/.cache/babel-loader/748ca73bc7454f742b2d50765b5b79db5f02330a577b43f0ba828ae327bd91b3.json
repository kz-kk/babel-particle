{"ast":null,"code":"var _jsxFileName = \"/Users/kasaikazunobu/project/babel/babel-project/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\n// App.js\nimport React, { useRef, useMemo, useEffect, useState } from 'react';\nimport { Canvas, useFrame, useLoader, useThree } from '@react-three/fiber';\nimport { OrbitControls, Line } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport { createNoise3D } from 'simplex-noise';\nimport ParticleText from './components/ParticleText';\nimport circleImg from './assets/circle.png';\nimport './App.css';\n\n// ... 残りのコード ...\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CameraControls({\n  position,\n  up\n}) {\n  _s();\n  const {\n    camera\n  } = useThree();\n  useEffect(() => {\n    camera.position.set(...position);\n    camera.up.set(...up);\n    camera.updateProjectionMatrix();\n  }, [camera, position, up]);\n  return /*#__PURE__*/_jsxDEV(OrbitControls, {\n    enableRotate: false,\n    enableZoom: false,\n    enablePan: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n}\n_s(CameraControls, \"Wo14/kl28HhoRfDX+Cg7MK2EhFU=\", false, function () {\n  return [useThree];\n});\n_c = CameraControls;\nfunction ParticleWave() {\n  _s2();\n  const pointsRef = useRef();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n\n  // Define noise3D within the ParticleWave component\n  const noise3D = useMemo(() => createNoise3D(), []);\n  const count = 80000;\n  const radius = 5;\n  const height = 10;\n  const speed = 0.8; // 速度を上げて、粒子より早く集約するようにする\n  const spiralSpeed = 0.3; // スパイラル速度も上げる\n  const flowIntensity = 0.05; // フロー強度を少し強める\n\n  const positions = useMemo(() => {\n    const positions = [];\n    for (let i = 0; i < count; i++) {\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(2 * Math.random() - 1);\n      const r = Math.pow(Math.random(), 0.3) * radius; // 0.5から0.3変更してより中心に集中させる\n      const x = r * Math.sin(phi) * Math.cos(theta);\n      const y = (Math.random() * 2 - 1) * height * 0.5; // 高さ範囲を半分に縮小\n      const z = r * Math.sin(phi) * Math.sin(theta);\n      positions.push(x, y, z);\n    }\n    return new Float32Array(positions);\n  }, [count, radius, height]);\n  useFrame(({\n    clock\n  }) => {\n    const time = clock.getElapsedTime();\n    const positionsArray = pointsRef.current.array;\n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3;\n      let x = positionsArray[i3];\n      let y = positionsArray[i3 + 1];\n      let z = positionsArray[i3 + 2];\n      const noise = noise3D(x * 0.5, y * 0.5, z * 0.5 + time * 0.2) * flowIntensity;\n      const angle = Math.atan2(z, x) + spiralSpeed * 0.02 + noise; // スパイラル速度を上げる\n      const r = Math.sqrt(x * x + z * z);\n      x = r * Math.cos(angle);\n      z = r * Math.sin(angle);\n      y += speed * 0.02 * (1 + noise); // 上昇速度を上げる\n\n      if (y > height / 2) {\n        // 上限に達したら下に戻す\n        y = -height / 2;\n        const newTheta = Math.random() * Math.PI * 2;\n        const newPhi = Math.acos(2 * Math.random() - 1);\n        const newR = Math.random() * radius;\n        x = newR * Math.sin(newPhi) * Math.cos(newTheta);\n        z = newR * Math.sin(newPhi) * Math.sin(newTheta);\n      }\n      positionsArray[i3] = x;\n      positionsArray[i3 + 1] = y;\n      positionsArray[i3 + 2] = z;\n    }\n    pointsRef.current.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"points\", {\n    frustumCulled: false,\n    children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n      children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        ref: pointsRef,\n        attach: \"attributes-position\",\n        array: positions,\n        count: positions.length / 3,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n      map: imgTex,\n      color: 0x66ffff,\n      size: 0.015 // サイズを0.02から0.01に減少\n      ,\n      sizeAttenuation: true,\n      transparent: true,\n      opacity: 0.3,\n      blending: THREE.AdditiveBlending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s2(ParticleWave, \"eVijncbd3mSJs94jF70ZKAX9Z/E=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c2 = ParticleWave;\nfunction ParticleBand({\n  yPosition,\n  count = 100000,\n  height = 0.4,\n  color = 0x66ffff\n}) {\n  _s3();\n  // height0.4に増加\n  const pointsRef = useRef();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const {\n    viewport\n  } = useThree();\n  const noise3D = useMemo(() => createNoise3D(), []);\n  const positions = useMemo(() => {\n    const positions = [];\n    const aspect = viewport.width / viewport.height;\n    const width = viewport.width * 1.2; // 幅を1.2倍に調整して密度を増加\n    const depth = width / aspect;\n    for (let i = 0; i < count; i++) {\n      const x = (Math.random() - 0.5) * width;\n      const y = yPosition + (Math.random() - 0.5) * height * 2; // 高さの範囲をさらに拡大\n      const z = (Math.random() - 0.5) * depth;\n      positions.push(x, y, z);\n    }\n    return new Float32Array(positions);\n  }, [count, height, yPosition, viewport.width, viewport.height]);\n  useFrame(({\n    clock\n  }) => {\n    const time = clock.getElapsedTime();\n    const positionsArray = pointsRef.current.array;\n    const width = viewport.width * 1.5;\n    const aspect = viewport.width / viewport.height;\n    const depth = width / aspect;\n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3;\n      let x = positionsArray[i3];\n      let y = positionsArray[i3 + 1];\n      let z = positionsArray[i3 + 2];\n\n      // ノイズを使用してより複雑な動きを生成\n      const noiseX = noise3D(x * 0.1, y * 0.1, time * 0.1) * 0.02;\n      const noiseY = noise3D(y * 0.1, z * 0.1, time * 0.1) * 0.02;\n      const noiseZ = noise3D(z * 0.1, x * 0.1, time * 0.1) * 0.02;\n      x += noiseX;\n      y += noiseY + Math.sin(x * 0.3 + time * 0.2) * 0.005; // 上下の動きを追加\n      z += noiseZ;\n\n      // 範囲外に出た粒子をリセット\n      if (x < -width / 2 || x > width / 2 || y < yPosition - height || y > yPosition + height || z < -depth / 2 || z > depth / 2) {\n        x = (Math.random() - 0.5) * width;\n        y = yPosition + (Math.random() - 0.5) * height * 2;\n        z = (Math.random() - 0.5) * depth;\n      }\n      positionsArray[i3] = x;\n      positionsArray[i3 + 1] = y;\n      positionsArray[i3 + 2] = z;\n    }\n    pointsRef.current.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"points\", {\n    frustumCulled: false,\n    children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n      children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n        ref: pointsRef,\n        attach: \"attributes-position\",\n        array: positions,\n        count: positions.length / 3,\n        itemSize: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n      map: imgTex,\n      color: color,\n      size: 0.015,\n      sizeAttenuation: true,\n      transparent: true,\n      opacity: 0.5 // 不透明度を上げて、より濃く見せる\n      ,\n      blending: THREE.AdditiveBlending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s3(ParticleBand, \"DR82PxGpIHJgRQvCaN4D7HGMsf8=\", false, function () {\n  return [useLoader, useThree, useFrame];\n});\n_c3 = ParticleBand;\nfunction MagicCircle() {\n  _s4();\n  const pointsRef = useRef();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const noise3D = useMemo(() => createNoise3D(), []);\n  const count = 100000; // 粒子数を増やす\n  const radius = 3;\n  const innerRadius = 1.5; // 内側の円の半径\n\n  const positions = useMemo(() => {\n    const positions = [];\n    for (let i = 0; i < count; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const r = Math.sqrt(Math.random()) * (radius - innerRadius) + innerRadius;\n      const x = r * Math.cos(angle);\n      const z = r * Math.sin(angle);\n      const y = (Math.random() - 0.5) * 0.05; // より平面に近づける\n      positions.push(x, y, z);\n    }\n    return new Float32Array(positions);\n  }, [count, radius, innerRadius]);\n  useFrame(({\n    clock\n  }) => {\n    const time = clock.getElapsedTime();\n    const positionsArray = pointsRef.current.array;\n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3;\n      let x = positionsArray[i3];\n      let y = positionsArray[i3 + 1];\n      let z = positionsArray[i3 + 2];\n      const r = Math.sqrt(x * x + z * z);\n      const angle = Math.atan2(z, x);\n\n      // 回転速度を半径に応じて変える\n      const rotationSpeed = 0.2 * (1 - (r - innerRadius) / (radius - innerRadius));\n      const newAngle = angle + rotationSpeed * 0.02;\n\n      // ズを使って微妙な揺らぎを加える\n      const noise = noise3D(x * 0.5, y * 0.5, z * 0.5 + time * 0.2) * 0.01;\n      x = r * Math.cos(newAngle) + noise;\n      z = r * Math.sin(newAngle) + noise;\n      y += Math.sin(time * 2 + r * 2) * 0.001; // 上下の動きを小さくする\n\n      positionsArray[i3] = x;\n      positionsArray[i3 + 1] = y;\n      positionsArray[i3 + 2] = z;\n    }\n    pointsRef.current.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"points\", {\n      frustumCulled: false,\n      children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n        children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n          ref: pointsRef,\n          attach: \"attributes-position\",\n          array: positions,\n          count: positions.length / 3,\n          itemSize: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n        map: imgTex,\n        color: 0x00ffff // 青い蛍光色\n        ,\n        size: 0.015,\n        sizeAttenuation: true,\n        transparent: true,\n        opacity: 0.8,\n        blending: THREE.AdditiveBlending\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MagicCircleDecorations, {\n      radius: radius,\n      innerRadius: innerRadius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n\n// 魔法陣の装飾的な要素を追加るコンポーネント\n_s4(MagicCircle, \"eVijncbd3mSJs94jF70ZKAX9Z/E=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c4 = MagicCircle;\nfunction MagicCircleDecorations({\n  radius,\n  innerRadius\n}) {\n  _s5();\n  const outerCircleRef = useRef();\n  const innerCircleRef = useRef();\n  useEffect(() => {\n    // 外側の円を描画\n    const outerCircleGeometry = new THREE.BufferGeometry();\n    const outerCircleVertices = [];\n    for (let i = 0; i <= 64; i++) {\n      const angle = i / 64 * Math.PI * 2;\n      outerCircleVertices.push(radius * Math.cos(angle), 0, radius * Math.sin(angle));\n    }\n    outerCircleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(outerCircleVertices, 3));\n    outerCircleRef.current.geometry = outerCircleGeometry;\n\n    // 内側の円を描画\n    const innerCircleGeometry = new THREE.BufferGeometry();\n    const innerCircleVertices = [];\n    for (let i = 0; i <= 64; i++) {\n      const angle = i / 64 * Math.PI * 2;\n      innerCircleVertices.push(innerRadius * Math.cos(angle), 0, innerRadius * Math.sin(angle));\n    }\n    innerCircleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(innerCircleVertices, 3));\n    innerCircleRef.current.geometry = innerCircleGeometry;\n  }, [radius, innerRadius]);\n\n  // 星型の形状を作成\n  const starShape = useMemo(() => {\n    const shape = new THREE.Shape();\n    const points = 5;\n    const outerRadius = 0.5;\n    const innerRadius = 0.2;\n    for (let i = 0; i < points * 2; i++) {\n      const angle = i / (points * 2) * Math.PI * 2;\n      const r = i % 2 === 0 ? outerRadius : innerRadius;\n      const x = Math.cos(angle) * r;\n      const y = Math.sin(angle) * r;\n      if (i === 0) {\n        shape.moveTo(x, y);\n      } else {\n        shape.lineTo(x, y);\n      }\n    }\n    shape.closePath();\n    return shape;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: [/*#__PURE__*/_jsxDEV(\"line\", {\n      ref: outerCircleRef,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: 0x00ffff,\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n      ref: innerCircleRef,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: 0x00ffff,\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), [0, 60, 120, 180, 240, 300].map((angle, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n      children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {\n        children: /*#__PURE__*/_jsxDEV(\"bufferAttribute\", {\n          attach: \"attributes-position\",\n          count: 2,\n          array: new Float32Array([Math.cos(angle * Math.PI / 180) * innerRadius, 0, Math.sin(angle * Math.PI / 180) * innerRadius, Math.cos(angle * Math.PI / 180) * radius, 0, Math.sin(angle * Math.PI / 180) * radius]),\n          itemSize: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: 0x00ffff,\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [0, 0.01, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"shapeGeometry\", {\n        args: [starShape]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n        color: 0x00ffff,\n        side: THREE.DoubleSide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n}\n\n// function LineCastle() {\n//   const [geometries, setGeometries] = useState([]);\n//   const [progress, setProgress] = useState(0);\n\n//   useEffect(() => {\n//     const loader = new SVGLoader();\n//     loader.load('/castle.svg', (data) => {\n//       const newGeometries = [];\n//       data.paths.forEach((path) => {\n//         // ベースのSVGパス\n//         const basePoints = [];\n//         path.subPaths.forEach((subPath) => {\n//           basePoints.push(...subPath.getPoints());\n//         });\n//         if (basePoints.length > 0) {\n//           const baseGeometry = new THREE.BufferGeometry().setFromPoints(basePoints);\n//           newGeometries.push({ type: 'base', geometry: baseGeometry });\n//         }\n\n//         // サブパス（頂点同士を結ぶ線）\n//         path.subPaths.forEach((subPath) => {\n//           const subPoints = subPath.getPoints();\n//           if (subPoints.length > 1) {\n//             const subGeometry = new THREE.BufferGeometry().setFromPoints([subPoints[0], subPoints[subPoints.length - 1]]);\n//             newGeometries.push({ type: 'sub', geometry: subGeometry });\n//           }\n//         });\n//       });\n//       setGeometries(newGeometries);\n//     });\n//   }, []);\n\n//   useFrame((state, delta) => {\n//     setProgress((prev) => Math.min(prev + delta * 0.2, 1));\n//   });\n\n//   const { totalLength, lineDistances } = useMemo(() => {\n//     let total = 0;\n//     const distances = [];\n//     geometries.forEach(({ geometry }) => {\n//       const positionAttribute = geometry.getAttribute('position');\n//       for (let i = 1; i < positionAttribute.count; i++) {\n//         const start = new THREE.Vector3().fromBufferAttribute(positionAttribute, i - 1);\n//         const end = new THREE.Vector3().fromBufferAttribute(positionAttribute, i);\n//         const length = start.distanceTo(end);\n//         total += length;\n//         distances.push(total);\n//       }\n//     });\n//     return { totalLength: total, lineDistances: distances };\n//   }, [geometries]);\n\n//   useEffect(() => {\n//     geometries.forEach(({ geometry }) => {\n//       if (geometry && lineDistances.length > 0) {\n//         geometry.setAttribute(\n//           'lineDistance',\n//           new THREE.BufferAttribute(new Float32Array(lineDistances), 1)\n//         );\n//       }\n//     });\n//   }, [geometries, lineDistances]);\n\n//   const baseMaterial = useMemo(() => {\n//     return new THREE.ShaderMaterial({\n//       uniforms: {\n//         uProgress: { value: progress },\n//         uTotalLength: { value: totalLength },\n//         color: { value: new THREE.Color(0x00ffff) },\n//       },\n//       vertexShader: `\n//         attribute float lineDistance;\n//         varying float vLineDistance;\n//         void main() {\n//           vLineDistance = lineDistance;\n//           gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n//         }\n//       `,\n//       fragmentShader: `\n//         uniform float uProgress;\n//         uniform float uTotalLength;\n//         uniform vec3 color;\n//         varying float vLineDistance;\n//         void main() {\n//           float alpha = step(vLineDistance / uTotalLength, uProgress);\n//           gl_FragColor = vec4(color, alpha * 0.3);\n//         }\n//       `,\n//       transparent: true,\n//     });\n//   }, [progress, totalLength]);\n\n//   const subMaterial = useMemo(() => {\n//     return new THREE.ShaderMaterial({\n//       uniforms: {\n//         uProgress: { value: progress },\n//         uTotalLength: { value: totalLength },\n//         color: { value: new THREE.Color(0x00ffff) },\n//       },\n//       vertexShader: `\n//         attribute float lineDistance;\n//         varying float vLineDistance;\n//         void main() {\n//           vLineDistance = lineDistance;\n//           gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n//         }\n//       `,\n//       fragmentShader: `\n//         uniform float uProgress;\n//         uniform float uTotalLength;\n//         uniform vec3 color;\n//         varying float vLineDistance;\n//         void main() {\n//           float alpha = step(vLineDistance / uTotalLength, uProgress);\n//           gl_FragColor = vec4(color, alpha * 0.01);\n//         }\n//       `,\n//       transparent: true,\n//     });\n//   }, [progress, totalLength]);\n\n//   return (\n//     <group>\n//       {geometries.map((item, index) => (\n//         <line key={index} geometry={item.geometry} material={item.type === 'base' ? baseMaterial : subMaterial} />\n//       ))}\n//     </group>\n//   );\n// }\n_s5(MagicCircleDecorations, \"wwVoCQXVTOjYdBdwhOD7pcWjwpM=\");\n_c5 = MagicCircleDecorations;\nfunction LineCastle() {\n  _s6();\n  const [geometries, setGeometries] = useState([]);\n  const [progress, setProgress] = useState(0);\n  useEffect(() => {\n    const loader = new SVGLoader();\n    loader.load('/castle.svg', data => {\n      const newGeometries = [];\n      data.paths.forEach(path => {\n        const shapes = SVGLoader.createShapes(path);\n        shapes.forEach(shape => {\n          const geometry = new THREE.ShapeGeometry(shape);\n          newGeometries.push({\n            geometry,\n            type: 'fill'\n          });\n        });\n        path.subPaths.forEach(subPath => {\n          let subPoints = subPath.getPoints();\n\n          // 重複する最初のポイントを削除\n          if (subPoints.length > 0 && newGeometries.length > 0) {\n            const lastGeometry = newGeometries[newGeometries.length - 1];\n            if (lastGeometry.type === 'line') {\n              const lastPoints = lastGeometry.geometry.getAttribute('position');\n              if (lastPoints.count > 0) {\n                const lastPoint = new THREE.Vector3(lastPoints.getX(lastPoints.count - 1), lastPoints.getY(lastPoints.count - 1), lastPoints.getZ(lastPoints.count - 1));\n                if (lastPoint.equals(new THREE.Vector3(subPoints[0].x, subPoints[0].y, subPoints[0].z))) {\n                  subPoints.shift();\n                }\n              }\n            }\n          }\n          if (subPoints.length > 0) {\n            const geometry = new THREE.BufferGeometry().setFromPoints(subPoints);\n            newGeometries.push({\n              geometry,\n              type: 'line'\n            });\n          }\n        });\n      });\n      setGeometries(newGeometries);\n    });\n  }, []);\n  useFrame((state, delta) => {\n    setProgress(prev => Math.min(prev + delta * 0.2, 1)); // アニメーション速度を調整\n  });\n\n  // 総距離と各ポイントの累積距離を計算\n  const {\n    totalLength,\n    lineDistances\n  } = useMemo(() => {\n    let total = 0;\n    const distances = [];\n    geometries.forEach(item => {\n      if (item.type === 'line') {\n        const position = item.geometry.getAttribute('position');\n        const points = [];\n        for (let i = 0; i < position.count; i++) {\n          points.push(new THREE.Vector3(position.getX(i), position.getY(i), position.getZ(i)));\n        }\n        for (let i = 1; i < points.length; i++) {\n          total += points[i - 1].distanceTo(points[i]);\n          distances.push(total);\n        }\n      }\n    });\n    return {\n      totalLength: total,\n      lineDistances: distances\n    };\n  }, [geometries]);\n\n  // lineDistance属性を設定\n  useEffect(() => {\n    geometries.forEach(item => {\n      if (item.type === 'line' && item.geometry && lineDistances.length > 0) {\n        item.geometry.setAttribute('lineDistance', new THREE.BufferAttribute(new Float32Array(lineDistances.slice(item.geometry.index ? item.geometry.index.count : 0)), 1));\n      }\n    });\n  }, [geometries, lineDistances]);\n\n  // シェーダーマテリアルを使用して、総距離に基づいて描画\n  const lineMaterial = useMemo(() => {\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        uProgress: {\n          value: progress\n        },\n        uTotalLength: {\n          value: totalLength\n        },\n        color: {\n          value: new THREE.Color(0x00ffff)\n        }\n      },\n      vertexShader: `\n        attribute float lineDistance;\n        varying float vLineDistance;\n        void main() {\n          vLineDistance = lineDistance;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float uProgress;\n        uniform float uTotalLength;\n        uniform vec3 color;\n        varying float vLineDistance;\n        void main() {\n          float alpha = step(vLineDistance / uTotalLength, uProgress);\n          gl_FragColor = vec4(color, alpha * 0.3);\n        }\n      `,\n      transparent: true\n    });\n  }, [progress, totalLength]);\n  const fillMaterial = useMemo(() => {\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        uProgress: {\n          value: progress\n        },\n        color: {\n          value: new THREE.Color(0x00ffff)\n        }\n      },\n      vertexShader: `\n        void main() {\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float uProgress;\n        uniform vec3 color;\n        void main() {\n          gl_FragColor = vec4(color, 0.05 * uProgress);\n        }\n      `,\n      transparent: true,\n      side: THREE.DoubleSide\n    });\n  }, [progress]);\n  if (geometries.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    children: geometries.map((item, index) => item.type === 'line' ? /*#__PURE__*/_jsxDEV(\"line\", {\n      geometry: item.geometry,\n      material: lineMaterial\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: item.geometry,\n      material: fillMaterial\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 641,\n    columnNumber: 5\n  }, this);\n}\n\n// function LineCastle() {\n//   const [paths, setPaths] = useState([]);\n//   const [progress, setProgress] = useState(0);\n\n//   useEffect(() => {\n//     const loader = new SVGLoader();\n//     loader.load('/castle.svg', (data) => {\n//       setPaths(data.paths);\n//     });\n//   }, []);\n\n//   useFrame((state, delta) => {\n//     setProgress((prev) => Math.min(prev + delta * 0.2, 1)); // アニメーション速度を調整\n//   });\n\n//   return (\n//     <group>\n//       {paths.map((path, pathIndex) => (\n//         <group key={pathIndex}>\n//           {path.subPaths.map((subPath, subPathIndex) => {\n//             const points = subPath.getPoints();\n//             const geometry = new THREE.BufferGeometry().setFromPoints(points);\n//             const totalLength = subPath.getLength();\n//             const dashArray = totalLength;\n//             const dashOffset = totalLength * (1 - progress);\n\n//             return (\n//               <line key={`${pathIndex}-${subPathIndex}`} geometry={geometry}>\n//                 <lineDashedMaterial\n//                   attach=\"material\"\n//                   color={0x00ffff}\n//                   linewidth={1}\n//                   scale={1}\n//                   dashSize={dashArray}\n//                   gapSize={totalLength}\n//                   dashOffset={dashOffset}\n//                   transparent={true}\n//                   opacity={0.3} // 不透明度を下げる\n//                 />\n//               </line>\n//             );\n//           })}\n//         </group>\n//       ))}\n//     </group>\n//   );\n// }\n_s6(LineCastle, \"8edaFaBPmjvnCUY/XXBsdVY4KVs=\", false, function () {\n  return [useFrame];\n});\n_c6 = LineCastle;\nfunction AnimationCanvas() {\n  _s7();\n  const [canvasSize, setCanvasSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [showLogo, setShowLogo] = useState(false);\n  const [showButtons, setShowButtons] = useState(false);\n  const [showMagicCircle, setShowMagicCircle] = useState(false);\n  const [cameraPosition, setCameraPosition] = useState([0, 0, 7]);\n  const [cameraUp, setCameraUp] = useState([0, 1, 0]);\n  const [showCastle, setShowCastle] = useState(false);\n  useEffect(() => {\n    const handleResize = () => {\n      setCanvasSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    const logoTimer = setTimeout(() => setShowLogo(true), 1000);\n    const buttonTimer = setTimeout(() => setShowButtons(true), 3000);\n    const magicCircleTimer = setTimeout(() => {\n      setShowMagicCircle(true);\n      setCameraPosition([0, 5, 0]); // カメラの高さを増やす\n      setCameraUp([0, 0, -1]);\n    }, 3000);\n    const castleTimer = setTimeout(() => {\n      setShowCastle(true);\n      setCameraPosition([0, 0, 7]); // カメラ位置をwaveと同じに戻す\n      setCameraUp([0, 1, 0]);\n    }, 6000); // 魔法陣の後に城を表示\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      clearTimeout(logoTimer);\n      clearTimeout(buttonTimer);\n      clearTimeout(magicCircleTimer);\n      clearTimeout(castleTimer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        fov: 75\n      },\n      style: {\n        width: canvasSize.width,\n        height: canvasSize.height\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"color\", {\n        attach: \"background\",\n        args: ['#000']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CameraControls, {\n        position: cameraPosition,\n        up: cameraUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 9\n      }, this), !showMagicCircle && /*#__PURE__*/_jsxDEV(ParticleWave, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 30\n      }, this), showMagicCircle && !showCastle && /*#__PURE__*/_jsxDEV(MagicCircle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 44\n      }, this), showCastle && /*#__PURE__*/_jsxDEV(\"group\", {\n        position: [-1, 6, -1],\n        scale: [0.02, -0.02, 0.02],\n        children: /*#__PURE__*/_jsxDEV(LineCastle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ParticleBand, {\n        yPosition: 4.5,\n        color: 0x66ffff,\n        count: 50000,\n        height: 0.4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ParticleBand, {\n        yPosition: -4.5,\n        color: 0x66ffff,\n        count: 50000,\n        height: 0.4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: `logo ${showLogo ? 'visible' : ''}`,\n        children: \"Babel & Zoltraak\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: `leed ${showLogo ? 'visible' : ''}`,\n        children: \"\\u8A00\\u8A9E\\u3092\\u8D85\\u3048\\u3001\\u6587\\u5316\\u3092\\u7E4B\\u3050 \\u65B0\\u305F\\u306A\\u4E16\\u754C\\u306E\\u5275\\u9020\\u3078\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `button-container ${showButtons ? 'visible' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          children: \"Babel Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          children: \"System List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s7(AnimationCanvas, \"b7TCYYPnq45vqEiTrmLEAfaU5ls=\");\n_c7 = AnimationCanvas;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"anim\",\n    children: /*#__PURE__*/_jsxDEV(AnimationCanvas, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 775,\n    columnNumber: 5\n  }, this);\n}\n_c8 = App;\nexport default App;\n\n// safe\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"CameraControls\");\n$RefreshReg$(_c2, \"ParticleWave\");\n$RefreshReg$(_c3, \"ParticleBand\");\n$RefreshReg$(_c4, \"MagicCircle\");\n$RefreshReg$(_c5, \"MagicCircleDecorations\");\n$RefreshReg$(_c6, \"LineCastle\");\n$RefreshReg$(_c7, \"AnimationCanvas\");\n$RefreshReg$(_c8, \"App\");","map":{"version":3,"names":["React","useRef","useMemo","useEffect","useState","Canvas","useFrame","useLoader","useThree","OrbitControls","Line","THREE","SVGLoader","createNoise3D","ParticleText","circleImg","jsxDEV","_jsxDEV","Fragment","_Fragment","CameraControls","position","up","_s","camera","set","updateProjectionMatrix","enableRotate","enableZoom","enablePan","fileName","_jsxFileName","lineNumber","columnNumber","_c","ParticleWave","_s2","pointsRef","imgTex","TextureLoader","noise3D","count","radius","height","speed","spiralSpeed","flowIntensity","positions","i","theta","Math","random","PI","phi","acos","r","pow","x","sin","cos","y","z","push","Float32Array","clock","time","getElapsedTime","positionsArray","current","array","i3","noise","angle","atan2","sqrt","newTheta","newPhi","newR","needsUpdate","frustumCulled","children","ref","attach","length","itemSize","map","color","size","sizeAttenuation","transparent","opacity","blending","AdditiveBlending","_c2","ParticleBand","yPosition","_s3","viewport","aspect","width","depth","noiseX","noiseY","noiseZ","_c3","MagicCircle","_s4","innerRadius","rotationSpeed","newAngle","MagicCircleDecorations","_c4","_s5","outerCircleRef","innerCircleRef","outerCircleGeometry","BufferGeometry","outerCircleVertices","setAttribute","Float32BufferAttribute","geometry","innerCircleGeometry","innerCircleVertices","starShape","shape","Shape","points","outerRadius","moveTo","lineTo","closePath","linewidth","index","args","side","DoubleSide","_c5","LineCastle","_s6","geometries","setGeometries","progress","setProgress","loader","load","data","newGeometries","paths","forEach","path","shapes","createShapes","ShapeGeometry","type","subPaths","subPath","subPoints","getPoints","lastGeometry","lastPoints","getAttribute","lastPoint","Vector3","getX","getY","getZ","equals","shift","setFromPoints","state","delta","prev","min","totalLength","lineDistances","total","distances","item","distanceTo","BufferAttribute","slice","lineMaterial","ShaderMaterial","uniforms","uProgress","value","uTotalLength","Color","vertexShader","fragmentShader","fillMaterial","material","_c6","AnimationCanvas","_s7","canvasSize","setCanvasSize","window","innerWidth","innerHeight","showLogo","setShowLogo","showButtons","setShowButtons","showMagicCircle","setShowMagicCircle","cameraPosition","setCameraPosition","cameraUp","setCameraUp","showCastle","setShowCastle","handleResize","addEventListener","logoTimer","setTimeout","buttonTimer","magicCircleTimer","castleTimer","removeEventListener","clearTimeout","fov","style","intensity","scale","className","_c7","App","_c8","$RefreshReg$"],"sources":["/Users/kasaikazunobu/project/babel/babel-project/src/App.js"],"sourcesContent":["// App.js\nimport React, { useRef, useMemo, useEffect, useState } from 'react';\nimport { Canvas, useFrame, useLoader, useThree } from '@react-three/fiber';\nimport { OrbitControls, Line } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\nimport { createNoise3D } from 'simplex-noise';\nimport ParticleText from './components/ParticleText';\n\nimport circleImg from './assets/circle.png';\nimport './App.css';\n\n// ... 残りのコード ...\n\nfunction CameraControls({ position, up }) {\n  const { camera } = useThree();\n  \n  useEffect(() => {\n    camera.position.set(...position);\n    camera.up.set(...up);\n    camera.updateProjectionMatrix();\n  }, [camera, position, up]);\n\n  return <OrbitControls enableRotate={false} enableZoom={false} enablePan={false} />;\n}\n\nfunction ParticleWave() {\n  const pointsRef = useRef();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  \n  // Define noise3D within the ParticleWave component\n  const noise3D = useMemo(() => createNoise3D(), []);\n\n  const count = 80000;\n  const radius = 5;\n  const height = 10;\n  const speed = 0.8; // 速度を上げて、粒子より早く集約するようにする\n  const spiralSpeed = 0.3; // スパイラル速度も上げる\n  const flowIntensity = 0.05; // フロー強度を少し強める\n\n  const positions = useMemo(() => {\n    const positions = [];\n    for (let i = 0; i < count; i++) {\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.acos(2 * Math.random() - 1);\n      const r = Math.pow(Math.random(), 0.3) * radius; // 0.5から0.3変更してより中心に集中させる\n      const x = r * Math.sin(phi) * Math.cos(theta);\n      const y = (Math.random() * 2 - 1) * height * 0.5; // 高さ範囲を半分に縮小\n      const z = r * Math.sin(phi) * Math.sin(theta);\n      positions.push(x, y, z);\n    }\n    return new Float32Array(positions);\n  }, [count, radius, height]);\n\n  useFrame(({ clock }) => {\n    const time = clock.getElapsedTime();\n    const positionsArray = pointsRef.current.array;\n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3;\n      let x = positionsArray[i3];\n      let y = positionsArray[i3 + 1];\n      let z = positionsArray[i3 + 2];\n\n      const noise = noise3D(x * 0.5, y * 0.5, z * 0.5 + time * 0.2) * flowIntensity;\n      const angle = Math.atan2(z, x) + spiralSpeed * 0.02 + noise; // スパイラル速度を上げる\n      const r = Math.sqrt(x * x + z * z);\n      \n      x = r * Math.cos(angle);\n      z = r * Math.sin(angle);\n      y += speed * 0.02 * (1 + noise); // 上昇速度を上げる\n\n      if (y > height / 2) { // 上限に達したら下に戻す\n        y = -height / 2;\n        const newTheta = Math.random() * Math.PI * 2;\n        const newPhi = Math.acos(2 * Math.random() - 1);\n        const newR = Math.random() * radius;\n        x = newR * Math.sin(newPhi) * Math.cos(newTheta);\n        z = newR * Math.sin(newPhi) * Math.sin(newTheta);\n      }\n\n      positionsArray[i3] = x;\n      positionsArray[i3 + 1] = y;\n      positionsArray[i3 + 2] = z;\n    }\n    pointsRef.current.needsUpdate = true;\n  });\n\n  return (\n    <points frustumCulled={false}>\n      <bufferGeometry>\n        <bufferAttribute\n          ref={pointsRef}\n          attach=\"attributes-position\"\n          array={positions}\n          count={positions.length / 3}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        map={imgTex}\n        color={0x66ffff}\n        size={0.015} // サイズを0.02から0.01に減少\n        sizeAttenuation\n        transparent={true}\n        opacity={0.3}\n        blending={THREE.AdditiveBlending}\n      />\n    </points>\n  );\n}\n\nfunction ParticleBand({ yPosition, count = 100000, height = 0.4, color = 0x66ffff }) { // height0.4に増加\n  const pointsRef = useRef();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const { viewport } = useThree();\n  const noise3D = useMemo(() => createNoise3D(), []);\n\n  const positions = useMemo(() => {\n    const positions = [];\n    const aspect = viewport.width / viewport.height;\n    const width = viewport.width * 1.2; // 幅を1.2倍に調整して密度を増加\n    const depth = width / aspect;\n    for (let i = 0; i < count; i++) {\n      const x = (Math.random() - 0.5) * width;\n      const y = yPosition + (Math.random() - 0.5) * height * 2; // 高さの範囲をさらに拡大\n      const z = (Math.random() - 0.5) * depth;\n      positions.push(x, y, z);\n    }\n    return new Float32Array(positions);\n  }, [count, height, yPosition, viewport.width, viewport.height]);\n\n  useFrame(({ clock }) => {\n    const time = clock.getElapsedTime();\n    const positionsArray = pointsRef.current.array;\n    const width = viewport.width * 1.5;\n    const aspect = viewport.width / viewport.height;\n    const depth = width / aspect;\n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3;\n      let x = positionsArray[i3];\n      let y = positionsArray[i3 + 1];\n      let z = positionsArray[i3 + 2];\n\n      // ノイズを使用してより複雑な動きを生成\n      const noiseX = noise3D(x * 0.1, y * 0.1, time * 0.1) * 0.02;\n      const noiseY = noise3D(y * 0.1, z * 0.1, time * 0.1) * 0.02;\n      const noiseZ = noise3D(z * 0.1, x * 0.1, time * 0.1) * 0.02;\n\n      x += noiseX;\n      y += noiseY + Math.sin(x * 0.3 + time * 0.2) * 0.005; // 上下の動きを追加\n      z += noiseZ;\n\n      // 範囲外に出た粒子をリセット\n      if (x < -width / 2 || x > width / 2 || \n          y < yPosition - height || y > yPosition + height || \n          z < -depth / 2 || z > depth / 2) {\n        x = (Math.random() - 0.5) * width;\n        y = yPosition + (Math.random() - 0.5) * height * 2;\n        z = (Math.random() - 0.5) * depth;\n      }\n\n      positionsArray[i3] = x;\n      positionsArray[i3 + 1] = y;\n      positionsArray[i3 + 2] = z;\n    }\n    pointsRef.current.needsUpdate = true;\n  });\n\n  return (\n    <points frustumCulled={false}>\n      <bufferGeometry>\n        <bufferAttribute\n          ref={pointsRef}\n          attach=\"attributes-position\"\n          array={positions}\n          count={positions.length / 3}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        map={imgTex}\n        color={color}\n        size={0.015}\n        sizeAttenuation\n        transparent={true}\n        opacity={0.5} // 不透明度を上げて、より濃く見せる\n        blending={THREE.AdditiveBlending}\n      />\n    </points>\n  );\n}\n\nfunction MagicCircle() {\n  const pointsRef = useRef();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const noise3D = useMemo(() => createNoise3D(), []);\n\n  const count = 100000; // 粒子数を増やす\n  const radius = 3;\n  const innerRadius = 1.5; // 内側の円の半径\n\n  const positions = useMemo(() => {\n    const positions = [];\n    for (let i = 0; i < count; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const r = Math.sqrt(Math.random()) * (radius - innerRadius) + innerRadius;\n      const x = r * Math.cos(angle);\n      const z = r * Math.sin(angle);\n      const y = (Math.random() - 0.5) * 0.05; // より平面に近づける\n      positions.push(x, y, z);\n    }\n    return new Float32Array(positions);\n  }, [count, radius, innerRadius]);\n\n  useFrame(({ clock }) => {\n    const time = clock.getElapsedTime();\n    const positionsArray = pointsRef.current.array;\n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3;\n      let x = positionsArray[i3];\n      let y = positionsArray[i3 + 1];\n      let z = positionsArray[i3 + 2];\n\n      const r = Math.sqrt(x * x + z * z);\n      const angle = Math.atan2(z, x);\n      \n      // 回転速度を半径に応じて変える\n      const rotationSpeed = 0.2 * (1 - (r - innerRadius) / (radius - innerRadius));\n      const newAngle = angle + rotationSpeed * 0.02;\n\n      // ズを使って微妙な揺らぎを加える\n      const noise = noise3D(x * 0.5, y * 0.5, z * 0.5 + time * 0.2) * 0.01;\n      \n      x = r * Math.cos(newAngle) + noise;\n      z = r * Math.sin(newAngle) + noise;\n      y += Math.sin(time * 2 + r * 2) * 0.001; // 上下の動きを小さくする\n\n      positionsArray[i3] = x;\n      positionsArray[i3 + 1] = y;\n      positionsArray[i3 + 2] = z;\n    }\n    pointsRef.current.needsUpdate = true;\n  });\n\n  return (\n    <group>\n      <points frustumCulled={false}>\n        <bufferGeometry>\n          <bufferAttribute\n            ref={pointsRef}\n            attach=\"attributes-position\"\n            array={positions}\n            count={positions.length / 3}\n            itemSize={3}\n          />\n        </bufferGeometry>\n        <pointsMaterial\n          map={imgTex}\n          color={0x00ffff} // 青い蛍光色\n          size={0.015}\n          sizeAttenuation\n          transparent={true}\n          opacity={0.8}\n          blending={THREE.AdditiveBlending}\n        />\n      </points>\n      {/* 魔法陣の装飾的な要素を追加 */}\n      <MagicCircleDecorations radius={radius} innerRadius={innerRadius} />\n    </group>\n  );\n}\n\n// 魔法陣の装飾的な要素を追加るコンポーネント\nfunction MagicCircleDecorations({ radius, innerRadius }) {\n  const outerCircleRef = useRef();\n  const innerCircleRef = useRef();\n\n  useEffect(() => {\n    // 外側の円を描画\n    const outerCircleGeometry = new THREE.BufferGeometry();\n    const outerCircleVertices = [];\n    for (let i = 0; i <= 64; i++) {\n      const angle = (i / 64) * Math.PI * 2;\n      outerCircleVertices.push(radius * Math.cos(angle), 0, radius * Math.sin(angle));\n    }\n    outerCircleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(outerCircleVertices, 3));\n    outerCircleRef.current.geometry = outerCircleGeometry;\n\n    // 内側の円を描画\n    const innerCircleGeometry = new THREE.BufferGeometry();\n    const innerCircleVertices = [];\n    for (let i = 0; i <= 64; i++) {\n      const angle = (i / 64) * Math.PI * 2;\n      innerCircleVertices.push(innerRadius * Math.cos(angle), 0, innerRadius * Math.sin(angle));\n    }\n    innerCircleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(innerCircleVertices, 3));\n    innerCircleRef.current.geometry = innerCircleGeometry;\n  }, [radius, innerRadius]);\n\n  // 星型の形状を作成\n  const starShape = useMemo(() => {\n    const shape = new THREE.Shape();\n    const points = 5;\n    const outerRadius = 0.5;\n    const innerRadius = 0.2;\n\n    for (let i = 0; i < points * 2; i++) {\n      const angle = (i / (points * 2)) * Math.PI * 2;\n      const r = i % 2 === 0 ? outerRadius : innerRadius;\n      const x = Math.cos(angle) * r;\n      const y = Math.sin(angle) * r;\n      if (i === 0) {\n        shape.moveTo(x, y);\n      } else {\n        shape.lineTo(x, y);\n      }\n    }\n    shape.closePath();\n    return shape;\n  }, []);\n\n  return (\n    <group>\n      <line ref={outerCircleRef}>\n        <lineBasicMaterial color={0x00ffff} linewidth={2} />\n      </line>\n      <line ref={innerCircleRef}>\n        <lineBasicMaterial color={0x00ffff} linewidth={2} />\n      </line>\n      {[0, 60, 120, 180, 240, 300].map((angle, index) => (\n        <line key={index}>\n          <bufferGeometry>\n            <bufferAttribute\n              attach=\"attributes-position\"\n              count={2}\n              array={new Float32Array([\n                Math.cos(angle * Math.PI / 180) * innerRadius,\n                0,\n                Math.sin(angle * Math.PI / 180) * innerRadius,\n                Math.cos(angle * Math.PI / 180) * radius,\n                0,\n                Math.sin(angle * Math.PI / 180) * radius,\n              ])}\n              itemSize={3}\n            />\n          </bufferGeometry>\n          <lineBasicMaterial color={0x00ffff} linewidth={2} />\n        </line>\n      ))}\n      {/* 魔法陣の中心に星を追加 */}\n      <mesh position={[0, 0.01, 0]}>\n        <shapeGeometry args={[starShape]} />\n        <meshBasicMaterial color={0x00ffff} side={THREE.DoubleSide} />\n      </mesh>\n    </group>\n  );\n}\n\n// function LineCastle() {\n//   const [geometries, setGeometries] = useState([]);\n//   const [progress, setProgress] = useState(0);\n\n//   useEffect(() => {\n//     const loader = new SVGLoader();\n//     loader.load('/castle.svg', (data) => {\n//       const newGeometries = [];\n//       data.paths.forEach((path) => {\n//         // ベースのSVGパス\n//         const basePoints = [];\n//         path.subPaths.forEach((subPath) => {\n//           basePoints.push(...subPath.getPoints());\n//         });\n//         if (basePoints.length > 0) {\n//           const baseGeometry = new THREE.BufferGeometry().setFromPoints(basePoints);\n//           newGeometries.push({ type: 'base', geometry: baseGeometry });\n//         }\n\n//         // サブパス（頂点同士を結ぶ線）\n//         path.subPaths.forEach((subPath) => {\n//           const subPoints = subPath.getPoints();\n//           if (subPoints.length > 1) {\n//             const subGeometry = new THREE.BufferGeometry().setFromPoints([subPoints[0], subPoints[subPoints.length - 1]]);\n//             newGeometries.push({ type: 'sub', geometry: subGeometry });\n//           }\n//         });\n//       });\n//       setGeometries(newGeometries);\n//     });\n//   }, []);\n\n//   useFrame((state, delta) => {\n//     setProgress((prev) => Math.min(prev + delta * 0.2, 1));\n//   });\n\n//   const { totalLength, lineDistances } = useMemo(() => {\n//     let total = 0;\n//     const distances = [];\n//     geometries.forEach(({ geometry }) => {\n//       const positionAttribute = geometry.getAttribute('position');\n//       for (let i = 1; i < positionAttribute.count; i++) {\n//         const start = new THREE.Vector3().fromBufferAttribute(positionAttribute, i - 1);\n//         const end = new THREE.Vector3().fromBufferAttribute(positionAttribute, i);\n//         const length = start.distanceTo(end);\n//         total += length;\n//         distances.push(total);\n//       }\n//     });\n//     return { totalLength: total, lineDistances: distances };\n//   }, [geometries]);\n\n//   useEffect(() => {\n//     geometries.forEach(({ geometry }) => {\n//       if (geometry && lineDistances.length > 0) {\n//         geometry.setAttribute(\n//           'lineDistance',\n//           new THREE.BufferAttribute(new Float32Array(lineDistances), 1)\n//         );\n//       }\n//     });\n//   }, [geometries, lineDistances]);\n\n//   const baseMaterial = useMemo(() => {\n//     return new THREE.ShaderMaterial({\n//       uniforms: {\n//         uProgress: { value: progress },\n//         uTotalLength: { value: totalLength },\n//         color: { value: new THREE.Color(0x00ffff) },\n//       },\n//       vertexShader: `\n//         attribute float lineDistance;\n//         varying float vLineDistance;\n//         void main() {\n//           vLineDistance = lineDistance;\n//           gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n//         }\n//       `,\n//       fragmentShader: `\n//         uniform float uProgress;\n//         uniform float uTotalLength;\n//         uniform vec3 color;\n//         varying float vLineDistance;\n//         void main() {\n//           float alpha = step(vLineDistance / uTotalLength, uProgress);\n//           gl_FragColor = vec4(color, alpha * 0.3);\n//         }\n//       `,\n//       transparent: true,\n//     });\n//   }, [progress, totalLength]);\n\n//   const subMaterial = useMemo(() => {\n//     return new THREE.ShaderMaterial({\n//       uniforms: {\n//         uProgress: { value: progress },\n//         uTotalLength: { value: totalLength },\n//         color: { value: new THREE.Color(0x00ffff) },\n//       },\n//       vertexShader: `\n//         attribute float lineDistance;\n//         varying float vLineDistance;\n//         void main() {\n//           vLineDistance = lineDistance;\n//           gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n//         }\n//       `,\n//       fragmentShader: `\n//         uniform float uProgress;\n//         uniform float uTotalLength;\n//         uniform vec3 color;\n//         varying float vLineDistance;\n//         void main() {\n//           float alpha = step(vLineDistance / uTotalLength, uProgress);\n//           gl_FragColor = vec4(color, alpha * 0.01);\n//         }\n//       `,\n//       transparent: true,\n//     });\n//   }, [progress, totalLength]);\n\n//   return (\n//     <group>\n//       {geometries.map((item, index) => (\n//         <line key={index} geometry={item.geometry} material={item.type === 'base' ? baseMaterial : subMaterial} />\n//       ))}\n//     </group>\n//   );\n// }\n\nfunction LineCastle() {\n  const [geometries, setGeometries] = useState([]);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const loader = new SVGLoader();\n    loader.load('/castle.svg', (data) => {\n      const newGeometries = [];\n\n      data.paths.forEach((path) => {\n        const shapes = SVGLoader.createShapes(path);\n        shapes.forEach((shape) => {\n          const geometry = new THREE.ShapeGeometry(shape);\n          newGeometries.push({ geometry, type: 'fill' });\n        });\n\n        path.subPaths.forEach((subPath) => {\n          let subPoints = subPath.getPoints();\n\n          // 重複する最初のポイントを削除\n          if (subPoints.length > 0 && newGeometries.length > 0) {\n            const lastGeometry = newGeometries[newGeometries.length - 1];\n            if (lastGeometry.type === 'line') {\n              const lastPoints = lastGeometry.geometry.getAttribute('position');\n              if (lastPoints.count > 0) {\n                const lastPoint = new THREE.Vector3(\n                  lastPoints.getX(lastPoints.count - 1),\n                  lastPoints.getY(lastPoints.count - 1),\n                  lastPoints.getZ(lastPoints.count - 1)\n                );\n                if (lastPoint.equals(new THREE.Vector3(subPoints[0].x, subPoints[0].y, subPoints[0].z))) {\n                  subPoints.shift();\n                }\n              }\n            }\n          }\n\n          if (subPoints.length > 0) {\n            const geometry = new THREE.BufferGeometry().setFromPoints(subPoints);\n            newGeometries.push({ geometry, type: 'line' });\n          }\n        });\n      });\n\n      setGeometries(newGeometries);\n    });\n  }, []);\n\n  useFrame((state, delta) => {\n    setProgress((prev) => Math.min(prev + delta * 0.2, 1)); // アニメーション速度を調整\n  });\n\n  // 総距離と各ポイントの累積距離を計算\n  const { totalLength, lineDistances } = useMemo(() => {\n    let total = 0;\n    const distances = [];\n\n    geometries.forEach((item) => {\n      if (item.type === 'line') {\n        const position = item.geometry.getAttribute('position');\n        const points = [];\n        for (let i = 0; i < position.count; i++) {\n          points.push(\n            new THREE.Vector3(\n              position.getX(i),\n              position.getY(i),\n              position.getZ(i)\n            )\n          );\n        }\n\n        for (let i = 1; i < points.length; i++) {\n          total += points[i - 1].distanceTo(points[i]);\n          distances.push(total);\n        }\n      }\n    });\n\n    return {\n      totalLength: total,\n      lineDistances: distances,\n    };\n  }, [geometries]);\n\n  // lineDistance属性を設定\n  useEffect(() => {\n    geometries.forEach((item) => {\n      if (item.type === 'line' && item.geometry && lineDistances.length > 0) {\n        item.geometry.setAttribute(\n          'lineDistance',\n          new THREE.BufferAttribute(new Float32Array(lineDistances.slice(item.geometry.index ? item.geometry.index.count : 0)), 1)\n        );\n      }\n    });\n  }, [geometries, lineDistances]);\n\n  // シェーダーマテリアルを使用して、総距離に基づいて描画\n  const lineMaterial = useMemo(() => {\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        uProgress: { value: progress },\n        uTotalLength: { value: totalLength },\n        color: { value: new THREE.Color(0x00ffff) },\n      },\n      vertexShader: `\n        attribute float lineDistance;\n        varying float vLineDistance;\n        void main() {\n          vLineDistance = lineDistance;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float uProgress;\n        uniform float uTotalLength;\n        uniform vec3 color;\n        varying float vLineDistance;\n        void main() {\n          float alpha = step(vLineDistance / uTotalLength, uProgress);\n          gl_FragColor = vec4(color, alpha * 0.3);\n        }\n      `,\n      transparent: true,\n    });\n  }, [progress, totalLength]);\n\n  const fillMaterial = useMemo(() => {\n    return new THREE.ShaderMaterial({\n      uniforms: {\n        uProgress: { value: progress },\n        color: { value: new THREE.Color(0x00ffff) },\n      },\n      vertexShader: `\n        void main() {\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform float uProgress;\n        uniform vec3 color;\n        void main() {\n          gl_FragColor = vec4(color, 0.05 * uProgress);\n        }\n      `,\n      transparent: true,\n      side: THREE.DoubleSide,\n    });\n  }, [progress]);\n\n  if (geometries.length === 0) return null;\n\n  return (\n    <group>\n      {geometries.map((item, index) => (\n        item.type === 'line' ? (\n          <line key={index} geometry={item.geometry} material={lineMaterial} />\n        ) : (\n          <mesh key={index} geometry={item.geometry} material={fillMaterial} />\n        )\n      ))}\n    </group>\n  );\n}\n\n// function LineCastle() {\n//   const [paths, setPaths] = useState([]);\n//   const [progress, setProgress] = useState(0);\n\n//   useEffect(() => {\n//     const loader = new SVGLoader();\n//     loader.load('/castle.svg', (data) => {\n//       setPaths(data.paths);\n//     });\n//   }, []);\n\n//   useFrame((state, delta) => {\n//     setProgress((prev) => Math.min(prev + delta * 0.2, 1)); // アニメーション速度を調整\n//   });\n\n//   return (\n//     <group>\n//       {paths.map((path, pathIndex) => (\n//         <group key={pathIndex}>\n//           {path.subPaths.map((subPath, subPathIndex) => {\n//             const points = subPath.getPoints();\n//             const geometry = new THREE.BufferGeometry().setFromPoints(points);\n//             const totalLength = subPath.getLength();\n//             const dashArray = totalLength;\n//             const dashOffset = totalLength * (1 - progress);\n\n//             return (\n//               <line key={`${pathIndex}-${subPathIndex}`} geometry={geometry}>\n//                 <lineDashedMaterial\n//                   attach=\"material\"\n//                   color={0x00ffff}\n//                   linewidth={1}\n//                   scale={1}\n//                   dashSize={dashArray}\n//                   gapSize={totalLength}\n//                   dashOffset={dashOffset}\n//                   transparent={true}\n//                   opacity={0.3} // 不透明度を下げる\n//                 />\n//               </line>\n//             );\n//           })}\n//         </group>\n//       ))}\n//     </group>\n//   );\n// }\n\nfunction AnimationCanvas() {\n  const [canvasSize, setCanvasSize] = useState({ width: window.innerWidth, height: window.innerHeight });\n  const [showLogo, setShowLogo] = useState(false);\n  const [showButtons, setShowButtons] = useState(false);\n  const [showMagicCircle, setShowMagicCircle] = useState(false);\n  const [cameraPosition, setCameraPosition] = useState([0, 0, 7]);\n  const [cameraUp, setCameraUp] = useState([0, 1, 0]);\n  const [showCastle, setShowCastle] = useState(false);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setCanvasSize({ width: window.innerWidth, height: window.innerHeight });\n    };\n    window.addEventListener('resize', handleResize);\n\n    const logoTimer = setTimeout(() => setShowLogo(true), 1000);\n    const buttonTimer = setTimeout(() => setShowButtons(true), 3000);\n    const magicCircleTimer = setTimeout(() => {\n      setShowMagicCircle(true);\n      setCameraPosition([0, 5, 0]); // カメラの高さを増やす\n      setCameraUp([0, 0, -1]);\n    }, 3000);\n    const castleTimer = setTimeout(() => {\n      setShowCastle(true);\n      setCameraPosition([0, 0, 7]); // カメラ位置をwaveと同じに戻す\n      setCameraUp([0, 1, 0]);\n    }, 6000); // 魔法陣の後に城を表示\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      clearTimeout(logoTimer);\n      clearTimeout(buttonTimer);\n      clearTimeout(magicCircleTimer);\n      clearTimeout(castleTimer);\n    };\n  }, []);\n\n  return (\n    <>\n      <Canvas camera={{ fov: 75 }} style={{ width: canvasSize.width, height: canvasSize.height }}>\n        <color attach=\"background\" args={['#000']} />\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} />\n        <CameraControls position={cameraPosition} up={cameraUp} />\n        {!showMagicCircle && <ParticleWave />}\n        {showMagicCircle && !showCastle && <MagicCircle />}\n        {showCastle && (\n          <group position={[-1, 6, -1]} scale={[0.02, -0.02, 0.02]}>\n            <LineCastle />\n          </group>\n        )}\n        <ParticleBand yPosition={4.5} color={0x66ffff} count={50000} height={0.4} />\n        <ParticleBand yPosition={-4.5} color={0x66ffff} count={50000} height={0.4} />\n      </Canvas>\n      <div className=\"overlay-content\">\n        <h1\n          className={`logo ${showLogo ? 'visible' : ''}`}\n        >\n          Babel & Zoltraak\n        </h1>\n        <h2 className={`leed ${showLogo ? 'visible' : ''}`}>\n          言語を超え、文化を繋ぐ 新たな世界の創造へ\n        </h2>\n        <div className={`button-container ${showButtons ? 'visible' : ''}`}>\n          <button className=\"action-button\">Babel Editor</button>\n          <button className=\"action-button\">System List</button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"anim\">\n      <AnimationCanvas />\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n// safe\n"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,OAAO,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACnE,SAASC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,oBAAoB;AAC1E,SAASC,aAAa,EAAEC,IAAI,QAAQ,mBAAmB;AACvD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,sCAAsC;AAChE,SAASC,aAAa,QAAQ,eAAe;AAC7C,OAAOC,YAAY,MAAM,2BAA2B;AAEpD,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAG,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM;IAAEC;EAAO,CAAC,GAAGhB,QAAQ,CAAC,CAAC;EAE7BL,SAAS,CAAC,MAAM;IACdqB,MAAM,CAACH,QAAQ,CAACI,GAAG,CAAC,GAAGJ,QAAQ,CAAC;IAChCG,MAAM,CAACF,EAAE,CAACG,GAAG,CAAC,GAAGH,EAAE,CAAC;IACpBE,MAAM,CAACE,sBAAsB,CAAC,CAAC;EACjC,CAAC,EAAE,CAACF,MAAM,EAAEH,QAAQ,EAAEC,EAAE,CAAC,CAAC;EAE1B,oBAAOL,OAAA,CAACR,aAAa;IAACkB,YAAY,EAAE,KAAM;IAACC,UAAU,EAAE,KAAM;IAACC,SAAS,EAAE;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpF;AAACV,EAAA,CAVQH,cAAc;EAAA,QACFZ,QAAQ;AAAA;AAAA0B,EAAA,GADpBd,cAAc;AAYvB,SAASe,YAAYA,CAAA,EAAG;EAAAC,GAAA;EACtB,MAAMC,SAAS,GAAGpC,MAAM,CAAC,CAAC;EAC1B,MAAMqC,MAAM,GAAG/B,SAAS,CAACI,KAAK,CAAC4B,aAAa,EAAExB,SAAS,CAAC;;EAExD;EACA,MAAMyB,OAAO,GAAGtC,OAAO,CAAC,MAAMW,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC;EAElD,MAAM4B,KAAK,GAAG,KAAK;EACnB,MAAMC,MAAM,GAAG,CAAC;EAChB,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,KAAK,GAAG,GAAG,CAAC,CAAC;EACnB,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAC;;EAE5B,MAAMC,SAAS,GAAG7C,OAAO,CAAC,MAAM;IAC9B,MAAM6C,SAAS,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC9B,MAAMC,KAAK,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAG,CAAC;MACzC,MAAMC,GAAG,GAAGH,IAAI,CAACI,IAAI,CAAC,CAAC,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;MAC5C,MAAMI,CAAC,GAAGL,IAAI,CAACM,GAAG,CAACN,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,GAAGT,MAAM,CAAC,CAAC;MACjD,MAAMe,CAAC,GAAGF,CAAC,GAAGL,IAAI,CAACQ,GAAG,CAACL,GAAG,CAAC,GAAGH,IAAI,CAACS,GAAG,CAACV,KAAK,CAAC;MAC7C,MAAMW,CAAC,GAAG,CAACV,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAIR,MAAM,GAAG,GAAG,CAAC,CAAC;MAClD,MAAMkB,CAAC,GAAGN,CAAC,GAAGL,IAAI,CAACQ,GAAG,CAACL,GAAG,CAAC,GAAGH,IAAI,CAACQ,GAAG,CAACT,KAAK,CAAC;MAC7CF,SAAS,CAACe,IAAI,CAACL,CAAC,EAAEG,CAAC,EAAEC,CAAC,CAAC;IACzB;IACA,OAAO,IAAIE,YAAY,CAAChB,SAAS,CAAC;EACpC,CAAC,EAAE,CAACN,KAAK,EAAEC,MAAM,EAAEC,MAAM,CAAC,CAAC;EAE3BrC,QAAQ,CAAC,CAAC;IAAE0D;EAAM,CAAC,KAAK;IACtB,MAAMC,IAAI,GAAGD,KAAK,CAACE,cAAc,CAAC,CAAC;IACnC,MAAMC,cAAc,GAAG9B,SAAS,CAAC+B,OAAO,CAACC,KAAK;IAC9C,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC9B,MAAMsB,EAAE,GAAGtB,CAAC,GAAG,CAAC;MAChB,IAAIS,CAAC,GAAGU,cAAc,CAACG,EAAE,CAAC;MAC1B,IAAIV,CAAC,GAAGO,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC;MAC9B,IAAIT,CAAC,GAAGM,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC;MAE9B,MAAMC,KAAK,GAAG/B,OAAO,CAACiB,CAAC,GAAG,GAAG,EAAEG,CAAC,GAAG,GAAG,EAAEC,CAAC,GAAG,GAAG,GAAGI,IAAI,GAAG,GAAG,CAAC,GAAGnB,aAAa;MAC7E,MAAM0B,KAAK,GAAGtB,IAAI,CAACuB,KAAK,CAACZ,CAAC,EAAEJ,CAAC,CAAC,GAAGZ,WAAW,GAAG,IAAI,GAAG0B,KAAK,CAAC,CAAC;MAC7D,MAAMhB,CAAC,GAAGL,IAAI,CAACwB,IAAI,CAACjB,CAAC,GAAGA,CAAC,GAAGI,CAAC,GAAGA,CAAC,CAAC;MAElCJ,CAAC,GAAGF,CAAC,GAAGL,IAAI,CAACS,GAAG,CAACa,KAAK,CAAC;MACvBX,CAAC,GAAGN,CAAC,GAAGL,IAAI,CAACQ,GAAG,CAACc,KAAK,CAAC;MACvBZ,CAAC,IAAIhB,KAAK,GAAG,IAAI,IAAI,CAAC,GAAG2B,KAAK,CAAC,CAAC,CAAC;;MAEjC,IAAIX,CAAC,GAAGjB,MAAM,GAAG,CAAC,EAAE;QAAE;QACpBiB,CAAC,GAAG,CAACjB,MAAM,GAAG,CAAC;QACf,MAAMgC,QAAQ,GAAGzB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAG,CAAC;QAC5C,MAAMwB,MAAM,GAAG1B,IAAI,CAACI,IAAI,CAAC,CAAC,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/C,MAAM0B,IAAI,GAAG3B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGT,MAAM;QACnCe,CAAC,GAAGoB,IAAI,GAAG3B,IAAI,CAACQ,GAAG,CAACkB,MAAM,CAAC,GAAG1B,IAAI,CAACS,GAAG,CAACgB,QAAQ,CAAC;QAChDd,CAAC,GAAGgB,IAAI,GAAG3B,IAAI,CAACQ,GAAG,CAACkB,MAAM,CAAC,GAAG1B,IAAI,CAACQ,GAAG,CAACiB,QAAQ,CAAC;MAClD;MAEAR,cAAc,CAACG,EAAE,CAAC,GAAGb,CAAC;MACtBU,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC,GAAGV,CAAC;MAC1BO,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC,GAAGT,CAAC;IAC5B;IACAxB,SAAS,CAAC+B,OAAO,CAACU,WAAW,GAAG,IAAI;EACtC,CAAC,CAAC;EAEF,oBACE7D,OAAA;IAAQ8D,aAAa,EAAE,KAAM;IAAAC,QAAA,gBAC3B/D,OAAA;MAAA+D,QAAA,eACE/D,OAAA;QACEgE,GAAG,EAAE5C,SAAU;QACf6C,MAAM,EAAC,qBAAqB;QAC5Bb,KAAK,EAAEtB,SAAU;QACjBN,KAAK,EAAEM,SAAS,CAACoC,MAAM,GAAG,CAAE;QAC5BC,QAAQ,EAAE;MAAE;QAAAtD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY,CAAC,eACjBhB,OAAA;MACEoE,GAAG,EAAE/C,MAAO;MACZgD,KAAK,EAAE,QAAS;MAChBC,IAAI,EAAE,KAAM,CAAC;MAAA;MACbC,eAAe;MACfC,WAAW,EAAE,IAAK;MAClBC,OAAO,EAAE,GAAI;MACbC,QAAQ,EAAEhF,KAAK,CAACiF;IAAiB;MAAA9D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEb;AAACG,GAAA,CAnFQD,YAAY;EAAA,QAEJ5B,SAAS,EA0BxBD,QAAQ;AAAA;AAAAuF,GAAA,GA5BD1D,YAAY;AAqFrB,SAAS2D,YAAYA,CAAC;EAAEC,SAAS;EAAEtD,KAAK,GAAG,MAAM;EAAEE,MAAM,GAAG,GAAG;EAAE2C,KAAK,GAAG;AAAS,CAAC,EAAE;EAAAU,GAAA;EAAE;EACrF,MAAM3D,SAAS,GAAGpC,MAAM,CAAC,CAAC;EAC1B,MAAMqC,MAAM,GAAG/B,SAAS,CAACI,KAAK,CAAC4B,aAAa,EAAExB,SAAS,CAAC;EACxD,MAAM;IAAEkF;EAAS,CAAC,GAAGzF,QAAQ,CAAC,CAAC;EAC/B,MAAMgC,OAAO,GAAGtC,OAAO,CAAC,MAAMW,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC;EAElD,MAAMkC,SAAS,GAAG7C,OAAO,CAAC,MAAM;IAC9B,MAAM6C,SAAS,GAAG,EAAE;IACpB,MAAMmD,MAAM,GAAGD,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACtD,MAAM;IAC/C,MAAMwD,KAAK,GAAGF,QAAQ,CAACE,KAAK,GAAG,GAAG,CAAC,CAAC;IACpC,MAAMC,KAAK,GAAGD,KAAK,GAAGD,MAAM;IAC5B,KAAK,IAAIlD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC9B,MAAMS,CAAC,GAAG,CAACP,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIgD,KAAK;MACvC,MAAMvC,CAAC,GAAGmC,SAAS,GAAG,CAAC7C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIR,MAAM,GAAG,CAAC,CAAC,CAAC;MAC1D,MAAMkB,CAAC,GAAG,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIiD,KAAK;MACvCrD,SAAS,CAACe,IAAI,CAACL,CAAC,EAAEG,CAAC,EAAEC,CAAC,CAAC;IACzB;IACA,OAAO,IAAIE,YAAY,CAAChB,SAAS,CAAC;EACpC,CAAC,EAAE,CAACN,KAAK,EAAEE,MAAM,EAAEoD,SAAS,EAAEE,QAAQ,CAACE,KAAK,EAAEF,QAAQ,CAACtD,MAAM,CAAC,CAAC;EAE/DrC,QAAQ,CAAC,CAAC;IAAE0D;EAAM,CAAC,KAAK;IACtB,MAAMC,IAAI,GAAGD,KAAK,CAACE,cAAc,CAAC,CAAC;IACnC,MAAMC,cAAc,GAAG9B,SAAS,CAAC+B,OAAO,CAACC,KAAK;IAC9C,MAAM8B,KAAK,GAAGF,QAAQ,CAACE,KAAK,GAAG,GAAG;IAClC,MAAMD,MAAM,GAAGD,QAAQ,CAACE,KAAK,GAAGF,QAAQ,CAACtD,MAAM;IAC/C,MAAMyD,KAAK,GAAGD,KAAK,GAAGD,MAAM;IAC5B,KAAK,IAAIlD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC9B,MAAMsB,EAAE,GAAGtB,CAAC,GAAG,CAAC;MAChB,IAAIS,CAAC,GAAGU,cAAc,CAACG,EAAE,CAAC;MAC1B,IAAIV,CAAC,GAAGO,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC;MAC9B,IAAIT,CAAC,GAAGM,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC;;MAE9B;MACA,MAAM+B,MAAM,GAAG7D,OAAO,CAACiB,CAAC,GAAG,GAAG,EAAEG,CAAC,GAAG,GAAG,EAAEK,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI;MAC3D,MAAMqC,MAAM,GAAG9D,OAAO,CAACoB,CAAC,GAAG,GAAG,EAAEC,CAAC,GAAG,GAAG,EAAEI,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI;MAC3D,MAAMsC,MAAM,GAAG/D,OAAO,CAACqB,CAAC,GAAG,GAAG,EAAEJ,CAAC,GAAG,GAAG,EAAEQ,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI;MAE3DR,CAAC,IAAI4C,MAAM;MACXzC,CAAC,IAAI0C,MAAM,GAAGpD,IAAI,CAACQ,GAAG,CAACD,CAAC,GAAG,GAAG,GAAGQ,IAAI,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;MACtDJ,CAAC,IAAI0C,MAAM;;MAEX;MACA,IAAI9C,CAAC,GAAG,CAAC0C,KAAK,GAAG,CAAC,IAAI1C,CAAC,GAAG0C,KAAK,GAAG,CAAC,IAC/BvC,CAAC,GAAGmC,SAAS,GAAGpD,MAAM,IAAIiB,CAAC,GAAGmC,SAAS,GAAGpD,MAAM,IAChDkB,CAAC,GAAG,CAACuC,KAAK,GAAG,CAAC,IAAIvC,CAAC,GAAGuC,KAAK,GAAG,CAAC,EAAE;QACnC3C,CAAC,GAAG,CAACP,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIgD,KAAK;QACjCvC,CAAC,GAAGmC,SAAS,GAAG,CAAC7C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIR,MAAM,GAAG,CAAC;QAClDkB,CAAC,GAAG,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIiD,KAAK;MACnC;MAEAjC,cAAc,CAACG,EAAE,CAAC,GAAGb,CAAC;MACtBU,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC,GAAGV,CAAC;MAC1BO,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC,GAAGT,CAAC;IAC5B;IACAxB,SAAS,CAAC+B,OAAO,CAACU,WAAW,GAAG,IAAI;EACtC,CAAC,CAAC;EAEF,oBACE7D,OAAA;IAAQ8D,aAAa,EAAE,KAAM;IAAAC,QAAA,gBAC3B/D,OAAA;MAAA+D,QAAA,eACE/D,OAAA;QACEgE,GAAG,EAAE5C,SAAU;QACf6C,MAAM,EAAC,qBAAqB;QAC5Bb,KAAK,EAAEtB,SAAU;QACjBN,KAAK,EAAEM,SAAS,CAACoC,MAAM,GAAG,CAAE;QAC5BC,QAAQ,EAAE;MAAE;QAAAtD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY,CAAC,eACjBhB,OAAA;MACEoE,GAAG,EAAE/C,MAAO;MACZgD,KAAK,EAAEA,KAAM;MACbC,IAAI,EAAE,KAAM;MACZC,eAAe;MACfC,WAAW,EAAE,IAAK;MAClBC,OAAO,EAAE,GAAI,CAAC;MAAA;MACdC,QAAQ,EAAEhF,KAAK,CAACiF;IAAiB;MAAA9D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEb;AAAC+D,GAAA,CA/EQF,YAAY;EAAA,QAEJvF,SAAS,EACHC,QAAQ,EAiB7BF,QAAQ;AAAA;AAAAkG,GAAA,GApBDV,YAAY;AAiFrB,SAASW,WAAWA,CAAA,EAAG;EAAAC,GAAA;EACrB,MAAMrE,SAAS,GAAGpC,MAAM,CAAC,CAAC;EAC1B,MAAMqC,MAAM,GAAG/B,SAAS,CAACI,KAAK,CAAC4B,aAAa,EAAExB,SAAS,CAAC;EACxD,MAAMyB,OAAO,GAAGtC,OAAO,CAAC,MAAMW,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC;EAElD,MAAM4B,KAAK,GAAG,MAAM,CAAC,CAAC;EACtB,MAAMC,MAAM,GAAG,CAAC;EAChB,MAAMiE,WAAW,GAAG,GAAG,CAAC,CAAC;;EAEzB,MAAM5D,SAAS,GAAG7C,OAAO,CAAC,MAAM;IAC9B,MAAM6C,SAAS,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC9B,MAAMwB,KAAK,GAAGtB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAG,CAAC;MACzC,MAAMG,CAAC,GAAGL,IAAI,CAACwB,IAAI,CAACxB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,IAAIT,MAAM,GAAGiE,WAAW,CAAC,GAAGA,WAAW;MACzE,MAAMlD,CAAC,GAAGF,CAAC,GAAGL,IAAI,CAACS,GAAG,CAACa,KAAK,CAAC;MAC7B,MAAMX,CAAC,GAAGN,CAAC,GAAGL,IAAI,CAACQ,GAAG,CAACc,KAAK,CAAC;MAC7B,MAAMZ,CAAC,GAAG,CAACV,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,CAAC;MACxCJ,SAAS,CAACe,IAAI,CAACL,CAAC,EAAEG,CAAC,EAAEC,CAAC,CAAC;IACzB;IACA,OAAO,IAAIE,YAAY,CAAChB,SAAS,CAAC;EACpC,CAAC,EAAE,CAACN,KAAK,EAAEC,MAAM,EAAEiE,WAAW,CAAC,CAAC;EAEhCrG,QAAQ,CAAC,CAAC;IAAE0D;EAAM,CAAC,KAAK;IACtB,MAAMC,IAAI,GAAGD,KAAK,CAACE,cAAc,CAAC,CAAC;IACnC,MAAMC,cAAc,GAAG9B,SAAS,CAAC+B,OAAO,CAACC,KAAK;IAC9C,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC9B,MAAMsB,EAAE,GAAGtB,CAAC,GAAG,CAAC;MAChB,IAAIS,CAAC,GAAGU,cAAc,CAACG,EAAE,CAAC;MAC1B,IAAIV,CAAC,GAAGO,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC;MAC9B,IAAIT,CAAC,GAAGM,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC;MAE9B,MAAMf,CAAC,GAAGL,IAAI,CAACwB,IAAI,CAACjB,CAAC,GAAGA,CAAC,GAAGI,CAAC,GAAGA,CAAC,CAAC;MAClC,MAAMW,KAAK,GAAGtB,IAAI,CAACuB,KAAK,CAACZ,CAAC,EAAEJ,CAAC,CAAC;;MAE9B;MACA,MAAMmD,aAAa,GAAG,GAAG,IAAI,CAAC,GAAG,CAACrD,CAAC,GAAGoD,WAAW,KAAKjE,MAAM,GAAGiE,WAAW,CAAC,CAAC;MAC5E,MAAME,QAAQ,GAAGrC,KAAK,GAAGoC,aAAa,GAAG,IAAI;;MAE7C;MACA,MAAMrC,KAAK,GAAG/B,OAAO,CAACiB,CAAC,GAAG,GAAG,EAAEG,CAAC,GAAG,GAAG,EAAEC,CAAC,GAAG,GAAG,GAAGI,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI;MAEpER,CAAC,GAAGF,CAAC,GAAGL,IAAI,CAACS,GAAG,CAACkD,QAAQ,CAAC,GAAGtC,KAAK;MAClCV,CAAC,GAAGN,CAAC,GAAGL,IAAI,CAACQ,GAAG,CAACmD,QAAQ,CAAC,GAAGtC,KAAK;MAClCX,CAAC,IAAIV,IAAI,CAACQ,GAAG,CAACO,IAAI,GAAG,CAAC,GAAGV,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;;MAEzCY,cAAc,CAACG,EAAE,CAAC,GAAGb,CAAC;MACtBU,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC,GAAGV,CAAC;MAC1BO,cAAc,CAACG,EAAE,GAAG,CAAC,CAAC,GAAGT,CAAC;IAC5B;IACAxB,SAAS,CAAC+B,OAAO,CAACU,WAAW,GAAG,IAAI;EACtC,CAAC,CAAC;EAEF,oBACE7D,OAAA;IAAA+D,QAAA,gBACE/D,OAAA;MAAQ8D,aAAa,EAAE,KAAM;MAAAC,QAAA,gBAC3B/D,OAAA;QAAA+D,QAAA,eACE/D,OAAA;UACEgE,GAAG,EAAE5C,SAAU;UACf6C,MAAM,EAAC,qBAAqB;UAC5Bb,KAAK,EAAEtB,SAAU;UACjBN,KAAK,EAAEM,SAAS,CAACoC,MAAM,GAAG,CAAE;UAC5BC,QAAQ,EAAE;QAAE;UAAAtD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACY,CAAC,eACjBhB,OAAA;QACEoE,GAAG,EAAE/C,MAAO;QACZgD,KAAK,EAAE,QAAS,CAAC;QAAA;QACjBC,IAAI,EAAE,KAAM;QACZC,eAAe;QACfC,WAAW,EAAE,IAAK;QAClBC,OAAO,EAAE,GAAI;QACbC,QAAQ,EAAEhF,KAAK,CAACiF;MAAiB;QAAA9D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAEThB,OAAA,CAAC6F,sBAAsB;MAACpE,MAAM,EAAEA,MAAO;MAACiE,WAAW,EAAEA;IAAY;MAAA7E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEZ;;AAEA;AAAAyE,GAAA,CAhFSD,WAAW;EAAA,QAEHlG,SAAS,EAoBxBD,QAAQ;AAAA;AAAAyG,GAAA,GAtBDN,WAAW;AAiFpB,SAASK,sBAAsBA,CAAC;EAAEpE,MAAM;EAAEiE;AAAY,CAAC,EAAE;EAAAK,GAAA;EACvD,MAAMC,cAAc,GAAGhH,MAAM,CAAC,CAAC;EAC/B,MAAMiH,cAAc,GAAGjH,MAAM,CAAC,CAAC;EAE/BE,SAAS,CAAC,MAAM;IACd;IACA,MAAMgH,mBAAmB,GAAG,IAAIxG,KAAK,CAACyG,cAAc,CAAC,CAAC;IACtD,MAAMC,mBAAmB,GAAG,EAAE;IAC9B,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC5B,MAAMwB,KAAK,GAAIxB,CAAC,GAAG,EAAE,GAAIE,IAAI,CAACE,EAAE,GAAG,CAAC;MACpCiE,mBAAmB,CAACvD,IAAI,CAACpB,MAAM,GAAGQ,IAAI,CAACS,GAAG,CAACa,KAAK,CAAC,EAAE,CAAC,EAAE9B,MAAM,GAAGQ,IAAI,CAACQ,GAAG,CAACc,KAAK,CAAC,CAAC;IACjF;IACA2C,mBAAmB,CAACG,YAAY,CAAC,UAAU,EAAE,IAAI3G,KAAK,CAAC4G,sBAAsB,CAACF,mBAAmB,EAAE,CAAC,CAAC,CAAC;IACtGJ,cAAc,CAAC7C,OAAO,CAACoD,QAAQ,GAAGL,mBAAmB;;IAErD;IACA,MAAMM,mBAAmB,GAAG,IAAI9G,KAAK,CAACyG,cAAc,CAAC,CAAC;IACtD,MAAMM,mBAAmB,GAAG,EAAE;IAC9B,KAAK,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC5B,MAAMwB,KAAK,GAAIxB,CAAC,GAAG,EAAE,GAAIE,IAAI,CAACE,EAAE,GAAG,CAAC;MACpCsE,mBAAmB,CAAC5D,IAAI,CAAC6C,WAAW,GAAGzD,IAAI,CAACS,GAAG,CAACa,KAAK,CAAC,EAAE,CAAC,EAAEmC,WAAW,GAAGzD,IAAI,CAACQ,GAAG,CAACc,KAAK,CAAC,CAAC;IAC3F;IACAiD,mBAAmB,CAACH,YAAY,CAAC,UAAU,EAAE,IAAI3G,KAAK,CAAC4G,sBAAsB,CAACG,mBAAmB,EAAE,CAAC,CAAC,CAAC;IACtGR,cAAc,CAAC9C,OAAO,CAACoD,QAAQ,GAAGC,mBAAmB;EACvD,CAAC,EAAE,CAAC/E,MAAM,EAAEiE,WAAW,CAAC,CAAC;;EAEzB;EACA,MAAMgB,SAAS,GAAGzH,OAAO,CAAC,MAAM;IAC9B,MAAM0H,KAAK,GAAG,IAAIjH,KAAK,CAACkH,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,CAAC;IAChB,MAAMC,WAAW,GAAG,GAAG;IACvB,MAAMpB,WAAW,GAAG,GAAG;IAEvB,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8E,MAAM,GAAG,CAAC,EAAE9E,CAAC,EAAE,EAAE;MACnC,MAAMwB,KAAK,GAAIxB,CAAC,IAAI8E,MAAM,GAAG,CAAC,CAAC,GAAI5E,IAAI,CAACE,EAAE,GAAG,CAAC;MAC9C,MAAMG,CAAC,GAAGP,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG+E,WAAW,GAAGpB,WAAW;MACjD,MAAMlD,CAAC,GAAGP,IAAI,CAACS,GAAG,CAACa,KAAK,CAAC,GAAGjB,CAAC;MAC7B,MAAMK,CAAC,GAAGV,IAAI,CAACQ,GAAG,CAACc,KAAK,CAAC,GAAGjB,CAAC;MAC7B,IAAIP,CAAC,KAAK,CAAC,EAAE;QACX4E,KAAK,CAACI,MAAM,CAACvE,CAAC,EAAEG,CAAC,CAAC;MACpB,CAAC,MAAM;QACLgE,KAAK,CAACK,MAAM,CAACxE,CAAC,EAAEG,CAAC,CAAC;MACpB;IACF;IACAgE,KAAK,CAACM,SAAS,CAAC,CAAC;IACjB,OAAON,KAAK;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3G,OAAA;IAAA+D,QAAA,gBACE/D,OAAA;MAAMgE,GAAG,EAAEgC,cAAe;MAAAjC,QAAA,eACxB/D,OAAA;QAAmBqE,KAAK,EAAE,QAAS;QAAC6C,SAAS,EAAE;MAAE;QAAArG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACPhB,OAAA;MAAMgE,GAAG,EAAEiC,cAAe;MAAAlC,QAAA,eACxB/D,OAAA;QAAmBqE,KAAK,EAAE,QAAS;QAAC6C,SAAS,EAAE;MAAE;QAAArG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,EACN,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACoD,GAAG,CAAC,CAACb,KAAK,EAAE4D,KAAK,kBAC5CnH,OAAA;MAAA+D,QAAA,gBACE/D,OAAA;QAAA+D,QAAA,eACE/D,OAAA;UACEiE,MAAM,EAAC,qBAAqB;UAC5BzC,KAAK,EAAE,CAAE;UACT4B,KAAK,EAAE,IAAIN,YAAY,CAAC,CACtBb,IAAI,CAACS,GAAG,CAACa,KAAK,GAAGtB,IAAI,CAACE,EAAE,GAAG,GAAG,CAAC,GAAGuD,WAAW,EAC7C,CAAC,EACDzD,IAAI,CAACQ,GAAG,CAACc,KAAK,GAAGtB,IAAI,CAACE,EAAE,GAAG,GAAG,CAAC,GAAGuD,WAAW,EAC7CzD,IAAI,CAACS,GAAG,CAACa,KAAK,GAAGtB,IAAI,CAACE,EAAE,GAAG,GAAG,CAAC,GAAGV,MAAM,EACxC,CAAC,EACDQ,IAAI,CAACQ,GAAG,CAACc,KAAK,GAAGtB,IAAI,CAACE,EAAE,GAAG,GAAG,CAAC,GAAGV,MAAM,CACzC,CAAE;UACH0C,QAAQ,EAAE;QAAE;UAAAtD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACY,CAAC,eACjBhB,OAAA;QAAmBqE,KAAK,EAAE,QAAS;QAAC6C,SAAS,EAAE;MAAE;QAAArG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAhB3CmG,KAAK;MAAAtG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAiBV,CACP,CAAC,eAEFhB,OAAA;MAAMI,QAAQ,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAE;MAAA2D,QAAA,gBAC3B/D,OAAA;QAAeoH,IAAI,EAAE,CAACV,SAAS;MAAE;QAAA7F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpChB,OAAA;QAAmBqE,KAAK,EAAE,QAAS;QAACgD,IAAI,EAAE3H,KAAK,CAAC4H;MAAW;QAAAzG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA+E,GAAA,CArNSF,sBAAsB;AAAA0B,GAAA,GAAtB1B,sBAAsB;AAuN/B,SAAS2B,UAAUA,CAAA,EAAG;EAAAC,GAAA;EACpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGxI,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACyI,QAAQ,EAAEC,WAAW,CAAC,GAAG1I,QAAQ,CAAC,CAAC,CAAC;EAE3CD,SAAS,CAAC,MAAM;IACd,MAAM4I,MAAM,GAAG,IAAInI,SAAS,CAAC,CAAC;IAC9BmI,MAAM,CAACC,IAAI,CAAC,aAAa,EAAGC,IAAI,IAAK;MACnC,MAAMC,aAAa,GAAG,EAAE;MAExBD,IAAI,CAACE,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAK;QAC3B,MAAMC,MAAM,GAAG1I,SAAS,CAAC2I,YAAY,CAACF,IAAI,CAAC;QAC3CC,MAAM,CAACF,OA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
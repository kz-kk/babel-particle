{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { TextureEffect } from \"postprocessing\";\nimport { forwardRef, useLayoutEffect, useMemo } from \"react\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { TextureLoader, RepeatWrapping } from \"three\";\nconst Texture = forwardRef(function Texture2({\n  textureSrc,\n  texture,\n  ...props\n}, ref) {\n  const t = useLoader(TextureLoader, textureSrc);\n  useLayoutEffect(() => {\n    if (\"encoding\" in t) t.encoding = 3001;else t.colorSpace = \"srgb\";\n    t.wrapS = t.wrapT = RepeatWrapping;\n  }, [t]);\n  const effect = useMemo(() => new TextureEffect({\n    ...props,\n    texture: t || texture\n  }), [props, t, texture]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ref,\n    object: effect,\n    dispose: null\n  });\n});\nexport { Texture };","map":{"version":3,"names":["Texture","forwardRef","Texture2","textureSrc","texture","props","ref","t","useLoader","TextureLoader","useLayoutEffect","encoding","colorSpace","wrapS","wrapT","RepeatWrapping","effect","useMemo","TextureEffect","jsx","object","dispose"],"sources":["/Users/kasaikazunobu/project/babel/babel-project/node_modules/@react-three/postprocessing/src/effects/Texture.tsx"],"sourcesContent":["import { TextureEffect } from 'postprocessing'\nimport { Ref, forwardRef, useMemo, useLayoutEffect } from 'react'\nimport { useLoader } from '@react-three/fiber'\nimport { TextureLoader, RepeatWrapping } from 'three'\n\ntype TextureProps = ConstructorParameters<typeof TextureEffect>[0] & {\n  textureSrc: string\n}\n\nexport const Texture = forwardRef<TextureEffect, TextureProps>(function Texture(\n  { textureSrc, texture, ...props }: TextureProps,\n  ref: Ref<TextureEffect>\n) {\n  const t = useLoader(TextureLoader, textureSrc)\n  useLayoutEffect(() => {\n    // @ts-ignore\n    if ('encoding' in t) t.encoding = 3001 // sRGBEncoding\n    // @ts-ignore\n    else t.colorSpace = 'srgb'\n    t.wrapS = t.wrapT = RepeatWrapping\n  }, [t])\n  const effect = useMemo(() => new TextureEffect({ ...props, texture: t || texture }), [props, t, texture])\n  return <primitive ref={ref} object={effect} dispose={null} />\n})\n"],"mappings":";;;;;AASa,MAAAA,OAAA,GAAUC,UAAA,CAAwC,SAASC,SACtE;EAAEC,UAAA;EAAYC,OAAA;EAAS,GAAGC;AAAM,GAChCC,GAAA,EACA;EACM,MAAAC,CAAA,GAAIC,SAAA,CAAUC,aAAA,EAAeN,UAAU;EAC7CO,eAAA,CAAgB,MAAM;IAEpB,IAAI,cAAcH,CAAA,EAAGA,CAAA,CAAEI,QAAA,GAAW,UAE7BJ,CAAA,CAAEK,UAAA,GAAa;IAClBL,CAAA,CAAAM,KAAA,GAAQN,CAAA,CAAEO,KAAA,GAAQC,cAAA;EAAA,GACnB,CAACR,CAAC,CAAC;EACN,MAAMS,MAAA,GAASC,OAAA,CAAQ,MAAM,IAAIC,aAAA,CAAc;IAAE,GAAGb,KAAA;IAAOD,OAAA,EAASG,CAAA,IAAKH;EAAS,IAAG,CAACC,KAAA,EAAOE,CAAA,EAAGH,OAAO,CAAC;EACxG,sBAAAe,GAAA,CAAQ,aAAU;IAAAb,GAAA;IAAUc,MAAA,EAAQJ,MAAA;IAAQK,OAAA,EAAS;EAAM;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
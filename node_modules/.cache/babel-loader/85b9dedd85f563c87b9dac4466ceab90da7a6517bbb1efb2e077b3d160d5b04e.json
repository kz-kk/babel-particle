{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { NoToneMapping, HalfFloatType } from \"three\";\nimport React, { createContext, forwardRef, useMemo, useEffect, useRef, useLayoutEffect, useImperativeHandle } from \"react\";\nimport { useThree, useFrame, useInstanceHandle } from \"@react-three/fiber\";\nimport { EffectComposer as EffectComposer$1, RenderPass, NormalPass, DepthDownsamplingPass, Effect, EffectPass, EffectAttribute, Pass } from \"postprocessing\";\nimport { isWebGL2Available } from \"three-stdlib\";\nconst EffectComposerContext = createContext(null);\nconst isConvolution = effect => (effect.getAttributes() & EffectAttribute.CONVOLUTION) === EffectAttribute.CONVOLUTION;\nconst EffectComposer = React.memo(forwardRef(({\n  children,\n  camera: _camera,\n  scene: _scene,\n  resolutionScale,\n  enabled = true,\n  renderPriority = 1,\n  autoClear = true,\n  depthBuffer,\n  enableNormalPass,\n  stencilBuffer,\n  multisampling = 8,\n  frameBufferType = HalfFloatType\n}, ref) => {\n  const {\n    gl,\n    scene: defaultScene,\n    camera: defaultCamera,\n    size\n  } = useThree();\n  const scene = _scene || defaultScene;\n  const camera = _camera || defaultCamera;\n  const [composer, normalPass, downSamplingPass] = useMemo(() => {\n    const webGL2Available = isWebGL2Available();\n    const effectComposer = new EffectComposer$1(gl, {\n      depthBuffer,\n      stencilBuffer,\n      multisampling: multisampling > 0 && webGL2Available ? multisampling : 0,\n      frameBufferType\n    });\n    effectComposer.addPass(new RenderPass(scene, camera));\n    let downSamplingPass2 = null;\n    let normalPass2 = null;\n    if (enableNormalPass) {\n      normalPass2 = new NormalPass(scene, camera);\n      normalPass2.enabled = false;\n      effectComposer.addPass(normalPass2);\n      if (resolutionScale !== void 0 && webGL2Available) {\n        downSamplingPass2 = new DepthDownsamplingPass({\n          normalBuffer: normalPass2.texture,\n          resolutionScale\n        });\n        downSamplingPass2.enabled = false;\n        effectComposer.addPass(downSamplingPass2);\n      }\n    }\n    return [effectComposer, normalPass2, downSamplingPass2];\n  }, [camera, gl, depthBuffer, stencilBuffer, multisampling, frameBufferType, scene, enableNormalPass, resolutionScale]);\n  useEffect(() => composer == null ? void 0 : composer.setSize(size.width, size.height), [composer, size]);\n  useFrame((_, delta) => {\n    if (enabled) {\n      const currentAutoClear = gl.autoClear;\n      gl.autoClear = autoClear;\n      if (stencilBuffer && !autoClear) gl.clearStencil();\n      composer.render(delta);\n      gl.autoClear = currentAutoClear;\n    }\n  }, enabled ? renderPriority : 0);\n  const group = useRef(null);\n  const instance = useInstanceHandle(group);\n  useLayoutEffect(() => {\n    const passes = [];\n    if (group.current && instance.current && composer) {\n      const children2 = instance.current.objects;\n      for (let i = 0; i < children2.length; i++) {\n        const child = children2[i];\n        if (child instanceof Effect) {\n          const effects = [child];\n          if (!isConvolution(child)) {\n            let next = null;\n            while ((next = children2[i + 1]) instanceof Effect) {\n              if (isConvolution(next)) break;\n              effects.push(next);\n              i++;\n            }\n          }\n          const pass = new EffectPass(camera, ...effects);\n          passes.push(pass);\n        } else if (child instanceof Pass) {\n          passes.push(child);\n        }\n      }\n      for (const pass of passes) composer == null ? void 0 : composer.addPass(pass);\n      if (normalPass) normalPass.enabled = true;\n      if (downSamplingPass) downSamplingPass.enabled = true;\n    }\n    return () => {\n      for (const pass of passes) composer == null ? void 0 : composer.removePass(pass);\n      if (normalPass) normalPass.enabled = false;\n      if (downSamplingPass) downSamplingPass.enabled = false;\n    };\n  }, [composer, children, camera, normalPass, downSamplingPass, instance]);\n  useEffect(() => {\n    const currentTonemapping = gl.toneMapping;\n    gl.toneMapping = NoToneMapping;\n    return () => {\n      gl.toneMapping = currentTonemapping;\n    };\n  }, []);\n  const state = useMemo(() => ({\n    composer,\n    normalPass,\n    downSamplingPass,\n    resolutionScale,\n    camera,\n    scene\n  }), [composer, normalPass, downSamplingPass, resolutionScale, camera, scene]);\n  useImperativeHandle(ref, () => composer, [composer]);\n  return /* @__PURE__ */jsx(EffectComposerContext.Provider, {\n    value: state,\n    children: /* @__PURE__ */jsx(\"group\", {\n      ref: group,\n      children\n    })\n  });\n}));\nexport { EffectComposer, EffectComposerContext };","map":{"version":3,"names":["EffectComposerContext","createContext","isConvolution","effect","getAttributes","EffectAttribute","CONVOLUTION","EffectComposer","React","memo","forwardRef","children","camera","_camera","scene","_scene","resolutionScale","enabled","renderPriority","autoClear","depthBuffer","enableNormalPass","stencilBuffer","multisampling","frameBufferType","HalfFloatType","ref","gl","defaultScene","defaultCamera","size","useThree","composer","normalPass","downSamplingPass","useMemo","webGL2Available","isWebGL2Available","effectComposer","EffectComposer$1","addPass","RenderPass","downSamplingPass2","normalPass2","NormalPass","DepthDownsamplingPass","normalBuffer","texture","useEffect","setSize","width","height","useFrame","_","delta","currentAutoClear","clearStencil","render","group","useRef","instance","useInstanceHandle","useLayoutEffect","passes","current","children2","objects","i","length","child","Effect","effects","next","push","pass","EffectPass","Pass","removePass","currentTonemapping","toneMapping","NoToneMapping","state","useImperativeHandle","jsx","Provider","value"],"sources":["/Users/kasaikazunobu/project/babel/babel-project/node_modules/@react-three/postprocessing/src/EffectComposer.tsx"],"sourcesContent":["import type { TextureDataType } from 'three'\nimport { HalfFloatType, NoToneMapping } from 'three'\nimport React, {\n  forwardRef,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  createContext,\n  useRef,\n  useImperativeHandle,\n} from 'react'\nimport { useThree, useFrame, useInstanceHandle } from '@react-three/fiber'\nimport {\n  EffectComposer as EffectComposerImpl,\n  RenderPass,\n  EffectPass,\n  NormalPass,\n  // @ts-ignore\n  DepthDownsamplingPass,\n  Effect,\n  Pass,\n  EffectAttribute,\n} from 'postprocessing'\nimport { isWebGL2Available } from 'three-stdlib'\n\nexport const EffectComposerContext = createContext<{\n  composer: EffectComposerImpl\n  normalPass: NormalPass | null\n  downSamplingPass: DepthDownsamplingPass | null\n  camera: THREE.Camera\n  scene: THREE.Scene\n  resolutionScale?: number\n}>(null!)\n\nexport type EffectComposerProps = {  \n  enabled?: boolean\n  children: JSX.Element | JSX.Element[]\n  depthBuffer?: boolean\n  /** Only used for SSGI currently, leave it disabled for everything else unless it's needed */\n  enableNormalPass?: boolean\n  stencilBuffer?: boolean\n  autoClear?: boolean\n  resolutionScale?: number\n  multisampling?: number\n  frameBufferType?: TextureDataType\n  renderPriority?: number\n  camera?: THREE.Camera\n  scene?: THREE.Scene\n}\n\nconst isConvolution = (effect: Effect): boolean =>\n  (effect.getAttributes() & EffectAttribute.CONVOLUTION) === EffectAttribute.CONVOLUTION\n\nexport const EffectComposer = React.memo(\n  forwardRef(\n    (\n      {\n        children,\n        camera: _camera,\n        scene: _scene,\n        resolutionScale,\n        enabled = true,\n        renderPriority = 1,\n        autoClear = true,\n        depthBuffer,\n        enableNormalPass,\n        stencilBuffer,\n        multisampling = 8,\n        frameBufferType = HalfFloatType,\n      }: EffectComposerProps,\n      ref\n    ) => {\n      const { gl, scene: defaultScene, camera: defaultCamera, size } = useThree()\n      const scene = _scene || defaultScene\n      const camera = _camera || defaultCamera\n\n      const [composer, normalPass, downSamplingPass] = useMemo(() => {\n        const webGL2Available = isWebGL2Available()\n        // Initialize composer\n        const effectComposer = new EffectComposerImpl(gl, {\n          depthBuffer,\n          stencilBuffer,\n          multisampling: multisampling > 0 && webGL2Available ? multisampling : 0,\n          frameBufferType,\n        })\n\n        // Add render pass\n        effectComposer.addPass(new RenderPass(scene, camera))\n\n        // Create normal pass\n        let downSamplingPass = null\n        let normalPass = null\n        if (enableNormalPass) {\n          normalPass = new NormalPass(scene, camera)\n          normalPass.enabled = false\n          effectComposer.addPass(normalPass)\n          if (resolutionScale !== undefined && webGL2Available) {\n            downSamplingPass = new DepthDownsamplingPass({ normalBuffer: normalPass.texture, resolutionScale })\n            downSamplingPass.enabled = false\n            effectComposer.addPass(downSamplingPass)\n          }\n        }\n\n        return [effectComposer, normalPass, downSamplingPass]\n      }, [\n        camera,\n        gl,\n        depthBuffer,\n        stencilBuffer,\n        multisampling,\n        frameBufferType,\n        scene,\n        enableNormalPass,\n        resolutionScale,\n      ])\n\n      useEffect(() => composer?.setSize(size.width, size.height), [composer, size])\n      useFrame(\n        (_, delta) => {\n          if (enabled) {\n            const currentAutoClear = gl.autoClear\n            gl.autoClear = autoClear\n            if (stencilBuffer && !autoClear) gl.clearStencil()\n            composer.render(delta)\n            gl.autoClear = currentAutoClear\n          }\n        },\n        enabled ? renderPriority : 0\n      )\n\n      const group = useRef(null)\n      const instance = useInstanceHandle(group)\n      useLayoutEffect(() => {\n        const passes: Pass[] = []\n\n        if (group.current && instance.current && composer) {\n          const children = instance.current.objects as unknown[]\n\n          for (let i = 0; i < children.length; i++) {\n            const child = children[i]\n\n            if (child instanceof Effect) {\n              const effects: Effect[] = [child]\n\n              if (!isConvolution(child)) {\n                let next: unknown = null\n                while ((next = children[i + 1]) instanceof Effect) {\n                  if (isConvolution(next)) break\n                  effects.push(next)\n                  i++\n                }\n              }\n\n              const pass = new EffectPass(camera, ...effects)\n              passes.push(pass)\n            } else if (child instanceof Pass) {\n              passes.push(child)\n            }\n          }\n\n          for (const pass of passes) composer?.addPass(pass)\n\n          if (normalPass) normalPass.enabled = true\n          if (downSamplingPass) downSamplingPass.enabled = true\n        }\n\n        return () => {\n          for (const pass of passes) composer?.removePass(pass)\n          if (normalPass) normalPass.enabled = false\n          if (downSamplingPass) downSamplingPass.enabled = false\n        }\n      }, [composer, children, camera, normalPass, downSamplingPass, instance])\n\n      // Disable tone mapping because threejs disallows tonemapping on render targets\n      useEffect(() => {\n        const currentTonemapping = gl.toneMapping\n        gl.toneMapping = NoToneMapping\n        return () => {\n          gl.toneMapping = currentTonemapping\n        }\n      }, [])\n\n      // Memoize state, otherwise it would trigger all consumers on every render\n      const state = useMemo(\n        () => ({ composer, normalPass, downSamplingPass, resolutionScale, camera, scene }),\n        [composer, normalPass, downSamplingPass, resolutionScale, camera, scene]\n      )\n\n      // Expose the composer\n      useImperativeHandle(ref, () => composer, [composer])\n\n      return (\n        <EffectComposerContext.Provider value={state}>\n          <group ref={group}>{children}</group>\n        </EffectComposerContext.Provider>\n      )\n    }\n  )\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { ToneMappingEffect, EffectAttribute } from \"postprocessing\";\nimport { forwardRef, useMemo, useEffect } from \"react\";\nconst ToneMapping = forwardRef(function ToneMapping2({\n  blendFunction,\n  adaptive,\n  mode,\n  resolution,\n  maxLuminance,\n  whitePoint,\n  middleGrey,\n  minLuminance,\n  averageLuminance,\n  adaptationRate,\n  ...props\n}, ref) {\n  const effect = useMemo(() => new ToneMappingEffect({\n    blendFunction,\n    adaptive,\n    mode,\n    resolution,\n    maxLuminance,\n    whitePoint,\n    middleGrey,\n    minLuminance,\n    averageLuminance,\n    adaptationRate\n  }), [blendFunction, adaptive, mode, resolution, maxLuminance, whitePoint, middleGrey, minLuminance, averageLuminance, adaptationRate]);\n  useEffect(() => {\n    effect.dispose();\n  }, [effect]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ...props,\n    ref,\n    object: effect,\n    attributes: EffectAttribute.CONVOLUTION\n  });\n});\nexport { ToneMapping };","map":{"version":3,"names":["ToneMapping","forwardRef","ToneMapping2","blendFunction","adaptive","mode","resolution","maxLuminance","whitePoint","middleGrey","minLuminance","averageLuminance","adaptationRate","props","ref","effect","useMemo","ToneMappingEffect","useEffect","dispose","jsx","object","attributes","EffectAttribute","CONVOLUTION"],"sources":["/Users/kasaikazunobu/project/babel/babel-project/node_modules/@react-three/postprocessing/src/effects/ToneMapping.tsx"],"sourcesContent":["import { ToneMappingEffect, EffectAttribute } from 'postprocessing'\nimport { EffectProps } from '../util'\nimport { forwardRef, useEffect, useMemo } from 'react'\n\nexport type ToneMappingProps = EffectProps<typeof ToneMappingEffect>\n\nexport const ToneMapping = forwardRef<ToneMappingEffect, ToneMappingProps>(function ToneMapping(\n  {\n    blendFunction,\n    adaptive,\n    mode,\n    resolution,\n    maxLuminance,\n    whitePoint,\n    middleGrey,\n    minLuminance,\n    averageLuminance,\n    adaptationRate,\n    ...props\n  },\n  ref\n) {\n  const effect = useMemo(\n    () =>\n      new ToneMappingEffect({\n        blendFunction,\n        adaptive,\n        mode,\n        resolution,\n        maxLuminance,\n        whitePoint,\n        middleGrey,\n        minLuminance,\n        averageLuminance,\n        adaptationRate,\n      }),\n    [\n      blendFunction,\n      adaptive,\n      mode,\n      resolution,\n      maxLuminance,\n      whitePoint,\n      middleGrey,\n      minLuminance,\n      averageLuminance,\n      adaptationRate,\n    ]\n  )\n\n  useEffect(() => {\n    effect.dispose()\n  }, [effect])\n\n  return <primitive {...props} ref={ref} object={effect} attributes={EffectAttribute.CONVOLUTION} />\n})\n"],"mappings":";;;AAMa,MAAAA,WAAA,GAAcC,UAAA,CAAgD,SAASC,aAClF;EACEC,aAAA;EACAC,QAAA;EACAC,IAAA;EACAC,UAAA;EACAC,YAAA;EACAC,UAAA;EACAC,UAAA;EACAC,YAAA;EACAC,gBAAA;EACAC,cAAA;EACA,GAAGC;AACL,GACAC,GAAA,EACA;EACA,MAAMC,MAAA,GAASC,OAAA,CACb,MACE,IAAIC,iBAAA,CAAkB;IACpBd,aAAA;IACAC,QAAA;IACAC,IAAA;IACAC,UAAA;IACAC,YAAA;IACAC,UAAA;IACAC,UAAA;IACAC,YAAA;IACAC,gBAAA;IACAC;EAAA,CACD,GACH,CACET,aAAA,EACAC,QAAA,EACAC,IAAA,EACAC,UAAA,EACAC,YAAA,EACAC,UAAA,EACAC,UAAA,EACAC,YAAA,EACAC,gBAAA,EACAC,cAAA,CACF;EAGFM,SAAA,CAAU,MAAM;IACdH,MAAA,CAAOI,OAAA,CAAQ;EAAA,GACd,CAACJ,MAAM,CAAC;EAEJ,sBAAAK,GAAA,CAAC;IAAW,GAAGP,KAAA;IAAOC,GAAA;IAAUO,MAAA,EAAQN,MAAA;IAAQO,UAAA,EAAYC,eAAA,CAAgBC;EAAa;AAClG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
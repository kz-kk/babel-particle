{"ast":null,"code":"import * as THREE from \"three\";\nimport { Pass } from \"postprocessing\";\nimport { Buffer } from \"buffer\";\nimport { FullScreenTriangle } from \"./FullScreenTriangle.js\";\nimport { EffectShader } from \"./EffectShader.js\";\nimport { EffectCompositer } from \"./EffectCompositer.js\";\nimport { PoissionBlur } from \"./PoissionBlur.js\";\nimport { DepthDownSample } from \"./DepthDownSample.js\";\nimport BlueNoise from \"./BlueNoise.js\";\nconst bluenoiseBits = Buffer.from(BlueNoise, \"base64\");\nfunction checkTimerQuery(timerQuery, gl, pass) {\n  const available = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT_AVAILABLE);\n  if (available) {\n    const elapsedTimeInNs = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT);\n    const elapsedTimeInMs = elapsedTimeInNs / 1e6;\n    pass.lastTime = elapsedTimeInMs;\n  } else {\n    setTimeout(() => {\n      checkTimerQuery(timerQuery, gl, pass);\n    }, 1);\n  }\n}\nclass N8AOPostPass extends Pass {\n  /**\n   *\n   * @param {THREE.Scene} scene\n   * @param {THREE.Camera} camera\n   * @param {number} width\n   * @param {number} height\n   *\n   * @property {THREE.Scene} scene\n   * @property {THREE.Camera} camera\n   * @property {number} width\n   * @property {number} height\n   */\n  constructor(scene, camera, width = 512, height = 512) {\n    super();\n    this.width = width;\n    this.height = height;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.autosetGamma = true;\n    this.configuration = new Proxy({\n      aoSamples: 16,\n      aoRadius: 5,\n      denoiseSamples: 8,\n      denoiseRadius: 12,\n      distanceFalloff: 1,\n      intensity: 5,\n      denoiseIterations: 2,\n      renderMode: 0,\n      color: new THREE.Color(0, 0, 0),\n      gammaCorrection: true,\n      logarithmicDepthBuffer: false,\n      screenSpaceRadius: false,\n      halfRes: false,\n      depthAwareUpsampling: true,\n      colorMultiply: true\n    }, {\n      set: (target, propName, value) => {\n        const oldProp = target[propName];\n        target[propName] = value;\n        if (propName === \"aoSamples\" && oldProp !== value) {\n          this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n        }\n        if (propName === \"denoiseSamples\" && oldProp !== value) {\n          this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n        }\n        if (propName === \"halfRes\" && oldProp !== value) {\n          this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n          this.configureHalfResTargets();\n          this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n          this.setSize(this.width, this.height);\n        }\n        if (propName === \"depthAwareUpsampling\" && oldProp !== value) {\n          this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n        }\n        if (propName === \"gammaCorrection\") {\n          this.autosetGamma = false;\n        }\n        return true;\n      }\n    });\n    this.samples = [];\n    this.samplesR = [];\n    this.samplesDenoise = [];\n    this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n    this.configureSampleDependentPasses();\n    this.configureHalfResTargets();\n    this.copyQuad = new FullScreenTriangle(new THREE.ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        }\n      },\n      depthWrite: false,\n      vertexShader: `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = vec4(position, 1);\n            }\n            `,\n      fragmentShader: `\n            uniform sampler2D tDiffuse;\n            varying vec2 vUv;\n            void main() {\n                gl_FragColor = texture2D(tDiffuse, vUv);\n            }\n            `\n    }));\n    this.writeTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false\n    });\n    this.readTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false\n    });\n    this.outputTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false\n    });\n    this.bluenoise =\n    //bluenoise;\n    new THREE.DataTexture(bluenoiseBits, 128, 128);\n    this.bluenoise.colorSpace = THREE.NoColorSpace;\n    this.bluenoise.wrapS = THREE.RepeatWrapping;\n    this.bluenoise.wrapT = THREE.RepeatWrapping;\n    this.bluenoise.minFilter = THREE.NearestFilter;\n    this.bluenoise.magFilter = THREE.NearestFilter;\n    this.bluenoise.needsUpdate = true;\n    this.lastTime = 0;\n    this.needsDepthTexture = true;\n    this.needsSwap = true;\n    this._r = new THREE.Vector2();\n    this._c = new THREE.Color();\n  }\n  configureHalfResTargets() {\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget =\n      /*new THREE.WebGLRenderTarget(this.width / 2, this.height / 2, {\n      minFilter: THREE.NearestFilter,\n      magFilter: THREE.NearestFilter,\n      depthBuffer: false,\n      format: THREE.RedFormat,\n      type: THREE.FloatType\n      });*/\n      new THREE.WebGLMultipleRenderTargets(this.width / 2, this.height / 2, 2);\n      this.depthDownsampleTarget.texture[0].format = THREE.RedFormat;\n      this.depthDownsampleTarget.texture[0].type = THREE.FloatType;\n      this.depthDownsampleTarget.texture[0].minFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[0].magFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[0].depthBuffer = false;\n      this.depthDownsampleTarget.texture[1].format = THREE.RGBAFormat;\n      this.depthDownsampleTarget.texture[1].type = THREE.HalfFloatType;\n      this.depthDownsampleTarget.texture[1].minFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[1].magFilter = THREE.NearestFilter;\n      this.depthDownsampleTarget.texture[1].depthBuffer = false;\n      this.depthDownsampleQuad = new FullScreenTriangle(new THREE.ShaderMaterial(DepthDownSample));\n    } else {\n      if (this.depthDownsampleTarget) {\n        this.depthDownsampleTarget.dispose();\n        this.depthDownsampleTarget = null;\n      }\n      if (this.depthDownsampleQuad) {\n        this.depthDownsampleQuad.dispose();\n        this.depthDownsampleQuad = null;\n      }\n    }\n  }\n  configureSampleDependentPasses() {\n    this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n    this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n  }\n  configureAOPass(logarithmicDepthBuffer = false) {\n    this.samples = this.generateHemisphereSamples(this.configuration.aoSamples);\n    this.samplesR = this.generateHemisphereSamplesR(this.configuration.aoSamples);\n    const e = {\n      ...EffectShader\n    };\n    e.fragmentShader = e.fragmentShader.replace(\"16\", this.configuration.aoSamples).replace(\"16.0\", this.configuration.aoSamples + \".0\");\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n    }\n    if (this.configuration.halfRes) {\n      e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n    }\n    if (this.effectShaderQuad) {\n      this.effectShaderQuad.material.dispose();\n      this.effectShaderQuad.material = new THREE.ShaderMaterial(e);\n    } else {\n      this.effectShaderQuad = new FullScreenTriangle(new THREE.ShaderMaterial(e));\n    }\n  }\n  configureDenoisePass(logarithmicDepthBuffer = false) {\n    this.samplesDenoise = this.generateDenoiseSamples(this.configuration.denoiseSamples, 11);\n    const p = {\n      ...PoissionBlur\n    };\n    p.fragmentShader = p.fragmentShader.replace(\"16\", this.configuration.denoiseSamples);\n    if (logarithmicDepthBuffer) {\n      p.fragmentShader = \"#define LOGDEPTH\\n\" + p.fragmentShader;\n    }\n    if (this.poissonBlurQuad) {\n      this.poissonBlurQuad.material.dispose();\n      this.poissonBlurQuad.material = new THREE.ShaderMaterial(p);\n    } else {\n      this.poissonBlurQuad = new FullScreenTriangle(new THREE.ShaderMaterial(p));\n    }\n  }\n  configureEffectCompositer(logarithmicDepthBuffer = false) {\n    const e = {\n      ...EffectCompositer\n    };\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = \"#define LOGDEPTH\\n\" + e.fragmentShader;\n    }\n    if (this.configuration.halfRes && this.configuration.depthAwareUpsampling) {\n      e.fragmentShader = \"#define HALFRES\\n\" + e.fragmentShader;\n    }\n    if (this.effectCompositerQuad) {\n      this.effectCompositerQuad.material.dispose();\n      this.effectCompositerQuad.material = new THREE.ShaderMaterial(e);\n    } else {\n      this.effectCompositerQuad = new FullScreenTriangle(new THREE.ShaderMaterial(e));\n    }\n  }\n  /**\n   *\n   * @param {Number} n\n   * @returns {THREE.Vector3[]}\n   */\n  generateHemisphereSamples(n) {\n    const points = [];\n    for (let k = 0; k < n; k++) {\n      const theta = 2.399963 * k;\n      const r = Math.sqrt(k + 0.5) / Math.sqrt(n);\n      const x = r * Math.cos(theta);\n      const y = r * Math.sin(theta);\n      const z = Math.sqrt(1 - (x * x + y * y));\n      points.push(new THREE.Vector3(x, y, z));\n    }\n    return points;\n  }\n  /**\n   *\n   * @param {number} n\n   * @returns {number[]}\n   */\n  generateHemisphereSamplesR(n) {\n    let samplesR = [];\n    for (let i = 0; i < n; i++) {\n      samplesR.push((i + 1) / n);\n    }\n    return samplesR;\n  }\n  /**\n   *\n   * @param {number} numSamples\n   * @param {number} numRings\n   * @returns {THREE.Vector2[]}\n   */\n  generateDenoiseSamples(numSamples, numRings) {\n    const angleStep = 2 * Math.PI * numRings / numSamples;\n    const invNumSamples = 1 / numSamples;\n    const radiusStep = invNumSamples;\n    const samples = [];\n    let radius = invNumSamples;\n    let angle = 0;\n    for (let i = 0; i < numSamples; i++) {\n      samples.push(new THREE.Vector2(Math.cos(angle), Math.sin(angle)).multiplyScalar(Math.pow(radius, 0.75)));\n      radius += radiusStep;\n      angle += angleStep;\n    }\n    return samples;\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    const c = this.configuration.halfRes ? 0.5 : 1;\n    this.writeTargetInternal.setSize(width * c, height * c);\n    this.readTargetInternal.setSize(width * c, height * c);\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget.setSize(width * c, height * c);\n    }\n    this.outputTargetInternal.setSize(width, height);\n  }\n  setDepthTexture(depthTexture) {\n    this.depthTexture = depthTexture;\n  }\n  render(renderer, inputBuffer, outputBuffer) {\n    const xrEnabled = renderer.xr.enabled;\n    renderer.xr.enabled = false;\n    if (renderer.capabilities.logarithmicDepthBuffer !== this.configuration.logarithmicDepthBuffer) {\n      this.configuration.logarithmicDepthBuffer = renderer.capabilities.logarithmicDepthBuffer;\n      this.configureAOPass(this.configuration.logarithmicDepthBuffer);\n      this.configureDenoisePass(this.configuration.logarithmicDepthBuffer);\n      this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer);\n    }\n    if (inputBuffer.texture.type !== this.outputTargetInternal.texture.type) {\n      this.outputTargetInternal.texture.type = inputBuffer.texture.type;\n      this.outputTargetInternal.texture.needsUpdate = true;\n    }\n    let gl;\n    let ext;\n    let timerQuery;\n    if (this.debugMode) {\n      gl = renderer.getContext();\n      ext = gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n      if (ext === null) {\n        console.error(\"EXT_disjoint_timer_query_webgl2 not available, disabling debug mode.\");\n        this.debugMode = false;\n      }\n    }\n    if (this.debugMode) {\n      timerQuery = gl.createQuery();\n      gl.beginQuery(ext.TIME_ELAPSED_EXT, timerQuery);\n    }\n    this.camera.updateMatrixWorld();\n    this._r.set(this.width, this.height);\n    let trueRadius = this.configuration.aoRadius;\n    if (this.configuration.halfRes && this.configuration.screenSpaceRadius) {\n      trueRadius *= 0.5;\n    }\n    if (this.configuration.halfRes) {\n      renderer.setRenderTarget(this.depthDownsampleTarget);\n      this.depthDownsampleQuad.material.uniforms.sceneDepth.value = this.depthTexture;\n      this.depthDownsampleQuad.material.uniforms.resolution.value = this._r;\n      this.depthDownsampleQuad.material.uniforms[\"near\"].value = this.camera.near;\n      this.depthDownsampleQuad.material.uniforms[\"far\"].value = this.camera.far;\n      this.depthDownsampleQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n      this.depthDownsampleQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n      this.depthDownsampleQuad.material.uniforms[\"logDepth\"].value = this.configuration.logarithmicDepthBuffer;\n      this.depthDownsampleQuad.render(renderer);\n    }\n    this.effectShaderQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n    this.effectShaderQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n    this.effectShaderQuad.material.uniforms[\"sceneNormal\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[1] : null;\n    this.effectShaderQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n    this.effectShaderQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n    this.effectShaderQuad.material.uniforms[\"projViewMat\"].value = this.camera.projectionMatrix.clone().multiply(this.camera.matrixWorldInverse.clone());\n    this.effectShaderQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n    this.effectShaderQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n    this.effectShaderQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new THREE.Vector3());\n    this.effectShaderQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(1 / 2).floor() : this._r;\n    this.effectShaderQuad.material.uniforms[\"time\"].value = performance.now() / 1e3;\n    this.effectShaderQuad.material.uniforms[\"samples\"].value = this.samples;\n    this.effectShaderQuad.material.uniforms[\"samplesR\"].value = this.samplesR;\n    this.effectShaderQuad.material.uniforms[\"bluenoise\"].value = this.bluenoise;\n    this.effectShaderQuad.material.uniforms[\"radius\"].value = trueRadius;\n    this.effectShaderQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n    this.effectShaderQuad.material.uniforms[\"near\"].value = this.camera.near;\n    this.effectShaderQuad.material.uniforms[\"far\"].value = this.camera.far;\n    this.effectShaderQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n    this.effectShaderQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n    this.effectShaderQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n    renderer.setRenderTarget(this.writeTargetInternal);\n    this.effectShaderQuad.render(renderer);\n    for (let i = 0; i < this.configuration.denoiseIterations; i++) {\n      [this.writeTargetInternal, this.readTargetInternal] = [this.readTargetInternal, this.writeTargetInternal];\n      this.poissonBlurQuad.material.uniforms[\"tDiffuse\"].value = this.readTargetInternal.texture;\n      this.poissonBlurQuad.material.uniforms[\"sceneDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n      this.poissonBlurQuad.material.uniforms[\"projMat\"].value = this.camera.projectionMatrix;\n      this.poissonBlurQuad.material.uniforms[\"viewMat\"].value = this.camera.matrixWorldInverse;\n      this.poissonBlurQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n      this.poissonBlurQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n      this.poissonBlurQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new THREE.Vector3());\n      this.poissonBlurQuad.material.uniforms[\"resolution\"].value = this.configuration.halfRes ? this._r.clone().multiplyScalar(1 / 2).floor() : this._r;\n      this.poissonBlurQuad.material.uniforms[\"time\"].value = performance.now() / 1e3;\n      this.poissonBlurQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n      this.poissonBlurQuad.material.uniforms[\"radius\"].value = this.configuration.denoiseRadius * (this.configuration.halfRes ? 1 / 2 : 1);\n      this.poissonBlurQuad.material.uniforms[\"worldRadius\"].value = trueRadius;\n      this.poissonBlurQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n      this.poissonBlurQuad.material.uniforms[\"index\"].value = i;\n      this.poissonBlurQuad.material.uniforms[\"poissonDisk\"].value = this.samplesDenoise;\n      this.poissonBlurQuad.material.uniforms[\"near\"].value = this.camera.near;\n      this.poissonBlurQuad.material.uniforms[\"far\"].value = this.camera.far;\n      this.poissonBlurQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n      this.poissonBlurQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n      renderer.setRenderTarget(this.writeTargetInternal);\n      this.poissonBlurQuad.render(renderer);\n    }\n    this.effectCompositerQuad.material.uniforms[\"sceneDiffuse\"].value = inputBuffer.texture;\n    this.effectCompositerQuad.material.uniforms[\"sceneDepth\"].value = this.depthTexture;\n    this.effectCompositerQuad.material.uniforms[\"near\"].value = this.camera.near;\n    this.effectCompositerQuad.material.uniforms[\"far\"].value = this.camera.far;\n    this.effectCompositerQuad.material.uniforms[\"projectionMatrixInv\"].value = this.camera.projectionMatrixInverse;\n    this.effectCompositerQuad.material.uniforms[\"viewMatrixInv\"].value = this.camera.matrixWorld;\n    this.effectCompositerQuad.material.uniforms[\"logDepth\"].value = renderer.capabilities.logarithmicDepthBuffer;\n    this.effectCompositerQuad.material.uniforms[\"ortho\"].value = this.camera.isOrthographicCamera;\n    this.effectCompositerQuad.material.uniforms[\"downsampledDepth\"].value = this.configuration.halfRes ? this.depthDownsampleTarget.texture[0] : this.depthTexture;\n    this.effectCompositerQuad.material.uniforms[\"resolution\"].value = this._r;\n    this.effectCompositerQuad.material.uniforms[\"blueNoise\"].value = this.bluenoise;\n    this.effectCompositerQuad.material.uniforms[\"intensity\"].value = this.configuration.intensity;\n    this.effectCompositerQuad.material.uniforms[\"renderMode\"].value = this.configuration.renderMode;\n    this.effectCompositerQuad.material.uniforms[\"screenSpaceRadius\"].value = this.configuration.screenSpaceRadius;\n    this.effectCompositerQuad.material.uniforms[\"radius\"].value = trueRadius;\n    this.effectCompositerQuad.material.uniforms[\"distanceFalloff\"].value = this.configuration.distanceFalloff;\n    this.effectCompositerQuad.material.uniforms[\"gammaCorrection\"].value = this.autosetGamma ? this.renderToScreen : this.configuration.gammaCorrection;\n    this.effectCompositerQuad.material.uniforms[\"tDiffuse\"].value = this.writeTargetInternal.texture;\n    this.effectCompositerQuad.material.uniforms[\"color\"].value = this._c.copy(this.configuration.color).convertSRGBToLinear();\n    this.effectCompositerQuad.material.uniforms[\"colorMultiply\"].value = this.configuration.colorMultiply;\n    this.effectCompositerQuad.material.uniforms[\"cameraPos\"].value = this.camera.getWorldPosition(new THREE.Vector3());\n    this.effectCompositerQuad.material.uniforms[\"fog\"].value = !!this.scene.fog;\n    if (this.scene.fog) {\n      if (this.scene.fog.isFog) {\n        this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = false;\n        this.effectCompositerQuad.material.uniforms[\"fogNear\"].value = this.scene.fog.near;\n        this.effectCompositerQuad.material.uniforms[\"fogFar\"].value = this.scene.fog.far;\n      } else if (this.scene.fog.isFogExp2) {\n        this.effectCompositerQuad.material.uniforms[\"fogExp\"].value = true;\n        this.effectCompositerQuad.material.uniforms[\"fogDensity\"].value = this.scene.fog.density;\n      } else {\n        console.error(`Unsupported fog type ${this.scene.fog.constructor.name} in SSAOPass.`);\n      }\n    }\n    renderer.setRenderTarget(\n    /* this.renderToScreen ? null :\n               outputBuffer*/\n    this.outputTargetInternal);\n    this.effectCompositerQuad.render(renderer);\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    this.copyQuad.material.uniforms[\"tDiffuse\"].value = this.outputTargetInternal.texture;\n    this.copyQuad.render(renderer);\n    if (this.debugMode) {\n      gl.endQuery(ext.TIME_ELAPSED_EXT);\n      checkTimerQuery(timerQuery, gl, this);\n    }\n    renderer.xr.enabled = xrEnabled;\n  }\n  /**\n   * Enables the debug mode of the AO, meaning the lastTime value will be updated.\n   */\n  enableDebugMode() {\n    this.debugMode = true;\n  }\n  /**\n   * Disables the debug mode of the AO, meaning the lastTime value will not be updated.\n   */\n  disableDebugMode() {\n    this.debugMode = false;\n  }\n  /**\n   * Sets the display mode of the AO\n   * @param {\"Combined\" | \"AO\" | \"No AO\" | \"Split\" | \"Split AO\"} mode - The display mode.\n   */\n  setDisplayMode(mode) {\n    this.configuration.renderMode = [\"Combined\", \"AO\", \"No AO\", \"Split\", \"Split AO\"].indexOf(mode);\n  }\n  /**\n   *\n   * @param {\"Performance\" | \"Low\" | \"Medium\" | \"High\" | \"Ultra\"} mode\n   */\n  setQualityMode(mode) {\n    if (mode === \"Performance\") {\n      this.configuration.aoSamples = 8;\n      this.configuration.denoiseSamples = 4;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"Low\") {\n      this.configuration.aoSamples = 16;\n      this.configuration.denoiseSamples = 4;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"Medium\") {\n      this.configuration.aoSamples = 16;\n      this.configuration.denoiseSamples = 8;\n      this.configuration.denoiseRadius = 12;\n    } else if (mode === \"High\") {\n      this.configuration.aoSamples = 64;\n      this.configuration.denoiseSamples = 8;\n      this.configuration.denoiseRadius = 6;\n    } else if (mode === \"Ultra\") {\n      this.configuration.aoSamples = 64;\n      this.configuration.denoiseSamples = 16;\n      this.configuration.denoiseRadius = 6;\n    }\n  }\n}\nexport { N8AOPostPass };","map":{"version":3,"names":["bluenoiseBits","Buffer","from","BlueNoise","checkTimerQuery","timerQuery","gl","pass","available","getQueryParameter","QUERY_RESULT_AVAILABLE","elapsedTimeInNs","QUERY_RESULT","elapsedTimeInMs","lastTime","setTimeout","N8AOPostPass","Pass","constructor","scene","camera","width","height","clear","autosetGamma","configuration","Proxy","aoSamples","aoRadius","denoiseSamples","denoiseRadius","distanceFalloff","intensity","denoiseIterations","renderMode","color","THREE","Color","gammaCorrection","logarithmicDepthBuffer","screenSpaceRadius","halfRes","depthAwareUpsampling","colorMultiply","set","target","propName","value","oldProp","configureAOPass","configureDenoisePass","configureHalfResTargets","configureEffectCompositer","setSize","samples","samplesR","samplesDenoise","configureSampleDependentPasses","copyQuad","FullScreenTriangle","ShaderMaterial","uniforms","tDiffuse","depthWrite","vertexShader","fragmentShader","writeTargetInternal","WebGLRenderTarget","minFilter","LinearFilter","magFilter","depthBuffer","readTargetInternal","outputTargetInternal","bluenoise","DataTexture","colorSpace","NoColorSpace","wrapS","RepeatWrapping","wrapT","NearestFilter","needsUpdate","needsDepthTexture","needsSwap","_r","Vector2","_c","depthDownsampleTarget","WebGLMultipleRenderTargets","texture","format","RedFormat","type","FloatType","RGBAFormat","HalfFloatType","depthDownsampleQuad","DepthDownSample","dispose","generateHemisphereSamples","generateHemisphereSamplesR","e","EffectShader","replace","effectShaderQuad","material","generateDenoiseSamples","p","PoissionBlur","poissonBlurQuad","EffectCompositer","effectCompositerQuad","n","points","k","theta","r","Math","sqrt","x","cos","y","sin","z","push","Vector3","i","numSamples","numRings","angleStep","PI","invNumSamples","radiusStep","radius","angle","multiplyScalar","pow","c","setDepthTexture","depthTexture","render","renderer","inputBuffer","outputBuffer","xrEnabled","xr","enabled","capabilities","ext","debugMode","getContext","getExtension","console","error","createQuery","beginQuery","TIME_ELAPSED_EXT","updateMatrixWorld","trueRadius","setRenderTarget","sceneDepth","resolution","near","far","projectionMatrixInverse","matrixWorld","projectionMatrix","matrixWorldInverse","clone","multiply","getWorldPosition","floor","performance","now","isOrthographicCamera","renderToScreen","copy","convertSRGBToLinear","fog","isFog","isFogExp2","density","name","endQuery","enableDebugMode","disableDebugMode","setDisplayMode","mode","indexOf","setQualityMode"],"sources":["/Users/kasaikazunobu/project/babel/babel-project/node_modules/@react-three/postprocessing/src/effects/N8AO/N8AOPostPass.js"],"sourcesContent":["import * as THREE from 'three'\nimport { Pass } from 'postprocessing'\nimport { Buffer } from 'buffer'\nimport { FullScreenTriangle } from './FullScreenTriangle'\nimport { EffectShader } from './EffectShader'\nimport { EffectCompositer } from './EffectCompositer'\nimport { PoissionBlur } from './PoissionBlur'\nimport { DepthDownSample } from './DepthDownSample'\nimport BlueNoise from './BlueNoise'\n\nconst bluenoiseBits = Buffer.from(BlueNoise, 'base64')\n\n/**\n *\n * @param {*} timerQuery\n * @param {THREE.WebGLRenderer} gl\n * @param {N8AOPass} pass\n */\nfunction checkTimerQuery(timerQuery, gl, pass) {\n  const available = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT_AVAILABLE)\n  if (available) {\n    const elapsedTimeInNs = gl.getQueryParameter(timerQuery, gl.QUERY_RESULT)\n    const elapsedTimeInMs = elapsedTimeInNs / 1000000\n    pass.lastTime = elapsedTimeInMs\n  } else {\n    // If the result is not available yet, check again after a delay\n    setTimeout(() => {\n      checkTimerQuery(timerQuery, gl, pass)\n    }, 1)\n  }\n}\nclass N8AOPostPass extends Pass {\n  /**\n   *\n   * @param {THREE.Scene} scene\n   * @param {THREE.Camera} camera\n   * @param {number} width\n   * @param {number} height\n   *\n   * @property {THREE.Scene} scene\n   * @property {THREE.Camera} camera\n   * @property {number} width\n   * @property {number} height\n   */\n  constructor(scene, camera, width = 512, height = 512) {\n    super()\n    this.width = width\n    this.height = height\n\n    this.clear = true\n\n    this.camera = camera\n    this.scene = scene\n    /**\n     * @type {Proxy & {\n     * aoSamples: number,\n     * aoRadius: number,\n     * denoiseSamples: number,\n     * denoiseRadius: number,\n     * distanceFalloff: number,\n     * intensity: number,\n     * denoiseIterations: number,\n     * renderMode: 0 | 1 | 2 | 3 | 4,\n     * color: THREE.Color,\n     * gammaCorrection: boolean,\n     * logarithmicDepthBuffer: boolean\n     * screenSpaceRadius: boolean,\n     * halfRes: boolean,\n     * depthAwareUpsampling: boolean\n     * colorMultiply: boolean\n     * }\n     */\n    this.autosetGamma = true\n    this.configuration = new Proxy(\n      {\n        aoSamples: 16,\n        aoRadius: 5.0,\n        denoiseSamples: 8,\n        denoiseRadius: 12,\n        distanceFalloff: 1.0,\n        intensity: 5,\n        denoiseIterations: 2.0,\n        renderMode: 0,\n        color: new THREE.Color(0, 0, 0),\n        gammaCorrection: true,\n        logarithmicDepthBuffer: false,\n        screenSpaceRadius: false,\n        halfRes: false,\n        depthAwareUpsampling: true,\n        colorMultiply: true,\n      },\n      {\n        set: (target, propName, value) => {\n          const oldProp = target[propName]\n          target[propName] = value\n          if (propName === 'aoSamples' && oldProp !== value) {\n            this.configureAOPass(this.configuration.logarithmicDepthBuffer)\n          }\n          if (propName === 'denoiseSamples' && oldProp !== value) {\n            this.configureDenoisePass(this.configuration.logarithmicDepthBuffer)\n          }\n          if (propName === 'halfRes' && oldProp !== value) {\n            this.configureAOPass(this.configuration.logarithmicDepthBuffer)\n            this.configureHalfResTargets()\n            this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer)\n            this.setSize(this.width, this.height)\n          }\n          if (propName === 'depthAwareUpsampling' && oldProp !== value) {\n            this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer)\n          }\n          if (propName === 'gammaCorrection') {\n            this.autosetGamma = false\n          }\n          return true\n        },\n      }\n    )\n    /** @type {THREE.Vector3[]} */\n    this.samples = []\n    /** @type {number[]} */\n    this.samplesR = []\n    /** @type {THREE.Vector2[]} */\n    this.samplesDenoise = []\n    this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer)\n    this.configureSampleDependentPasses()\n    this.configureHalfResTargets()\n    //   this.effectCompisterQuad = new FullScreenTriangle(new THREE.ShaderMaterial(EffectCompositer));\n    this.copyQuad = new FullScreenTriangle(\n      new THREE.ShaderMaterial({\n        uniforms: {\n          tDiffuse: {\n            value: null,\n          },\n        },\n        depthWrite: false,\n        vertexShader: `\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = vec4(position, 1);\n            }\n            `,\n        fragmentShader: `\n            uniform sampler2D tDiffuse;\n            varying vec2 vUv;\n            void main() {\n                gl_FragColor = texture2D(tDiffuse, vUv);\n            }\n            `,\n      })\n    )\n    this.writeTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false,\n    })\n    this.readTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false,\n    })\n    this.outputTargetInternal = new THREE.WebGLRenderTarget(this.width, this.height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      depthBuffer: false,\n    })\n\n    /** @type {THREE.DataTexture} */\n    this.bluenoise = //bluenoise;\n      new THREE.DataTexture(bluenoiseBits, 128, 128)\n    this.bluenoise.colorSpace = THREE.NoColorSpace\n    this.bluenoise.wrapS = THREE.RepeatWrapping\n    this.bluenoise.wrapT = THREE.RepeatWrapping\n    this.bluenoise.minFilter = THREE.NearestFilter\n    this.bluenoise.magFilter = THREE.NearestFilter\n    this.bluenoise.needsUpdate = true\n    this.lastTime = 0\n    this.needsDepthTexture = true\n    this.needsSwap = true\n    this._r = new THREE.Vector2()\n    this._c = new THREE.Color()\n  }\n  configureHalfResTargets() {\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget =\n        /*new THREE.WebGLRenderTarget(this.width / 2, this.height / 2, {\n                               minFilter: THREE.NearestFilter,\n                               magFilter: THREE.NearestFilter,\n                               depthBuffer: false,\n                               format: THREE.RedFormat,\n                               type: THREE.FloatType\n                           });*/\n        new THREE.WebGLMultipleRenderTargets(this.width / 2, this.height / 2, 2)\n      this.depthDownsampleTarget.texture[0].format = THREE.RedFormat\n      this.depthDownsampleTarget.texture[0].type = THREE.FloatType\n      this.depthDownsampleTarget.texture[0].minFilter = THREE.NearestFilter\n      this.depthDownsampleTarget.texture[0].magFilter = THREE.NearestFilter\n      this.depthDownsampleTarget.texture[0].depthBuffer = false\n      this.depthDownsampleTarget.texture[1].format = THREE.RGBAFormat\n      this.depthDownsampleTarget.texture[1].type = THREE.HalfFloatType\n      this.depthDownsampleTarget.texture[1].minFilter = THREE.NearestFilter\n      this.depthDownsampleTarget.texture[1].magFilter = THREE.NearestFilter\n      this.depthDownsampleTarget.texture[1].depthBuffer = false\n\n      this.depthDownsampleQuad = new FullScreenTriangle(new THREE.ShaderMaterial(DepthDownSample))\n    } else {\n      if (this.depthDownsampleTarget) {\n        this.depthDownsampleTarget.dispose()\n        this.depthDownsampleTarget = null\n      }\n      if (this.depthDownsampleQuad) {\n        this.depthDownsampleQuad.dispose()\n        this.depthDownsampleQuad = null\n      }\n    }\n  }\n  configureSampleDependentPasses() {\n    this.configureAOPass(this.configuration.logarithmicDepthBuffer)\n    this.configureDenoisePass(this.configuration.logarithmicDepthBuffer)\n  }\n  configureAOPass(logarithmicDepthBuffer = false) {\n    this.samples = this.generateHemisphereSamples(this.configuration.aoSamples)\n    this.samplesR = this.generateHemisphereSamplesR(this.configuration.aoSamples)\n    const e = { ...EffectShader }\n    e.fragmentShader = e.fragmentShader\n      .replace('16', this.configuration.aoSamples)\n      .replace('16.0', this.configuration.aoSamples + '.0')\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = '#define LOGDEPTH\\n' + e.fragmentShader\n    }\n    if (this.configuration.halfRes) {\n      e.fragmentShader = '#define HALFRES\\n' + e.fragmentShader\n    }\n    if (this.effectShaderQuad) {\n      this.effectShaderQuad.material.dispose()\n      this.effectShaderQuad.material = new THREE.ShaderMaterial(e)\n    } else {\n      this.effectShaderQuad = new FullScreenTriangle(new THREE.ShaderMaterial(e))\n    }\n  }\n  configureDenoisePass(logarithmicDepthBuffer = false) {\n    this.samplesDenoise = this.generateDenoiseSamples(this.configuration.denoiseSamples, 11)\n    const p = { ...PoissionBlur }\n    p.fragmentShader = p.fragmentShader.replace('16', this.configuration.denoiseSamples)\n    if (logarithmicDepthBuffer) {\n      p.fragmentShader = '#define LOGDEPTH\\n' + p.fragmentShader\n    }\n    if (this.poissonBlurQuad) {\n      this.poissonBlurQuad.material.dispose()\n      this.poissonBlurQuad.material = new THREE.ShaderMaterial(p)\n    } else {\n      this.poissonBlurQuad = new FullScreenTriangle(new THREE.ShaderMaterial(p))\n    }\n  }\n  configureEffectCompositer(logarithmicDepthBuffer = false) {\n    const e = { ...EffectCompositer }\n    if (logarithmicDepthBuffer) {\n      e.fragmentShader = '#define LOGDEPTH\\n' + e.fragmentShader\n    }\n    if (this.configuration.halfRes && this.configuration.depthAwareUpsampling) {\n      e.fragmentShader = '#define HALFRES\\n' + e.fragmentShader\n    }\n    if (this.effectCompositerQuad) {\n      this.effectCompositerQuad.material.dispose()\n      this.effectCompositerQuad.material = new THREE.ShaderMaterial(e)\n    } else {\n      this.effectCompositerQuad = new FullScreenTriangle(new THREE.ShaderMaterial(e))\n    }\n  }\n  /**\n   *\n   * @param {Number} n\n   * @returns {THREE.Vector3[]}\n   */\n  generateHemisphereSamples(n) {\n    const points = []\n    for (let k = 0; k < n; k++) {\n      const theta = 2.399963 * k\n      const r = Math.sqrt(k + 0.5) / Math.sqrt(n)\n      const x = r * Math.cos(theta)\n      const y = r * Math.sin(theta)\n      // Project to hemisphere\n      const z = Math.sqrt(1 - (x * x + y * y))\n      points.push(new THREE.Vector3(x, y, z))\n    }\n    return points\n  }\n  /**\n   *\n   * @param {number} n\n   * @returns {number[]}\n   */\n  generateHemisphereSamplesR(n) {\n    let samplesR = []\n    for (let i = 0; i < n; i++) {\n      samplesR.push((i + 1) / n)\n    }\n    return samplesR\n  }\n  /**\n   *\n   * @param {number} numSamples\n   * @param {number} numRings\n   * @returns {THREE.Vector2[]}\n   */\n  generateDenoiseSamples(numSamples, numRings) {\n    const angleStep = (2 * Math.PI * numRings) / numSamples\n    const invNumSamples = 1.0 / numSamples\n    const radiusStep = invNumSamples\n    const samples = []\n    let radius = invNumSamples\n    let angle = 0\n    for (let i = 0; i < numSamples; i++) {\n      samples.push(new THREE.Vector2(Math.cos(angle), Math.sin(angle)).multiplyScalar(Math.pow(radius, 0.75)))\n      radius += radiusStep\n      angle += angleStep\n    }\n    return samples\n  }\n  setSize(width, height) {\n    this.width = width\n    this.height = height\n    const c = this.configuration.halfRes ? 0.5 : 1\n    this.writeTargetInternal.setSize(width * c, height * c)\n    this.readTargetInternal.setSize(width * c, height * c)\n    if (this.configuration.halfRes) {\n      this.depthDownsampleTarget.setSize(width * c, height * c)\n    }\n    this.outputTargetInternal.setSize(width, height)\n  }\n  setDepthTexture(depthTexture) {\n    this.depthTexture = depthTexture\n  }\n  render(renderer, inputBuffer, outputBuffer) {\n    const xrEnabled = renderer.xr.enabled\n    renderer.xr.enabled = false\n\n    // Copy inputBuffer to outputBuffer\n    //renderer.setRenderTarget(outputBuffer);\n    //  this.copyQuad.material.uniforms.tDiffuse.value = inputBuffer.texture;\n    //   this.copyQuad.render(renderer);\n\n    if (renderer.capabilities.logarithmicDepthBuffer !== this.configuration.logarithmicDepthBuffer) {\n      this.configuration.logarithmicDepthBuffer = renderer.capabilities.logarithmicDepthBuffer\n      this.configureAOPass(this.configuration.logarithmicDepthBuffer)\n      this.configureDenoisePass(this.configuration.logarithmicDepthBuffer)\n      this.configureEffectCompositer(this.configuration.logarithmicDepthBuffer)\n    }\n    if (inputBuffer.texture.type !== this.outputTargetInternal.texture.type) {\n      this.outputTargetInternal.texture.type = inputBuffer.texture.type\n      this.outputTargetInternal.texture.needsUpdate = true\n    }\n    let gl\n    let ext\n    let timerQuery\n    if (this.debugMode) {\n      gl = renderer.getContext()\n      ext = gl.getExtension('EXT_disjoint_timer_query_webgl2')\n      if (ext === null) {\n        console.error('EXT_disjoint_timer_query_webgl2 not available, disabling debug mode.')\n        this.debugMode = false\n      }\n    }\n    if (this.debugMode) {\n      timerQuery = gl.createQuery()\n      gl.beginQuery(ext.TIME_ELAPSED_EXT, timerQuery)\n    }\n    this.camera.updateMatrixWorld()\n    this._r.set(this.width, this.height)\n    let trueRadius = this.configuration.aoRadius\n    if (this.configuration.halfRes && this.configuration.screenSpaceRadius) {\n      trueRadius *= 0.5\n    }\n    if (this.configuration.halfRes) {\n      renderer.setRenderTarget(this.depthDownsampleTarget)\n      this.depthDownsampleQuad.material.uniforms.sceneDepth.value = this.depthTexture\n      this.depthDownsampleQuad.material.uniforms.resolution.value = this._r\n      this.depthDownsampleQuad.material.uniforms['near'].value = this.camera.near\n      this.depthDownsampleQuad.material.uniforms['far'].value = this.camera.far\n      this.depthDownsampleQuad.material.uniforms['projectionMatrixInv'].value = this.camera.projectionMatrixInverse\n      this.depthDownsampleQuad.material.uniforms['viewMatrixInv'].value = this.camera.matrixWorld\n      this.depthDownsampleQuad.material.uniforms['logDepth'].value = this.configuration.logarithmicDepthBuffer\n      this.depthDownsampleQuad.render(renderer)\n    }\n    this.effectShaderQuad.material.uniforms['sceneDiffuse'].value = inputBuffer.texture\n    this.effectShaderQuad.material.uniforms['sceneDepth'].value = this.configuration.halfRes\n      ? this.depthDownsampleTarget.texture[0]\n      : this.depthTexture\n    this.effectShaderQuad.material.uniforms['sceneNormal'].value = this.configuration.halfRes\n      ? this.depthDownsampleTarget.texture[1]\n      : null\n    this.effectShaderQuad.material.uniforms['projMat'].value = this.camera.projectionMatrix\n    this.effectShaderQuad.material.uniforms['viewMat'].value = this.camera.matrixWorldInverse\n    this.effectShaderQuad.material.uniforms['projViewMat'].value = this.camera.projectionMatrix\n      .clone()\n      .multiply(this.camera.matrixWorldInverse.clone())\n    this.effectShaderQuad.material.uniforms['projectionMatrixInv'].value = this.camera.projectionMatrixInverse\n    this.effectShaderQuad.material.uniforms['viewMatrixInv'].value = this.camera.matrixWorld\n    this.effectShaderQuad.material.uniforms['cameraPos'].value = this.camera.getWorldPosition(new THREE.Vector3())\n    this.effectShaderQuad.material.uniforms['resolution'].value = this.configuration.halfRes\n      ? this._r\n          .clone()\n          .multiplyScalar(1 / 2)\n          .floor()\n      : this._r\n    this.effectShaderQuad.material.uniforms['time'].value = performance.now() / 1000\n    this.effectShaderQuad.material.uniforms['samples'].value = this.samples\n    this.effectShaderQuad.material.uniforms['samplesR'].value = this.samplesR\n    this.effectShaderQuad.material.uniforms['bluenoise'].value = this.bluenoise\n    this.effectShaderQuad.material.uniforms['radius'].value = trueRadius\n    this.effectShaderQuad.material.uniforms['distanceFalloff'].value = this.configuration.distanceFalloff\n    this.effectShaderQuad.material.uniforms['near'].value = this.camera.near\n    this.effectShaderQuad.material.uniforms['far'].value = this.camera.far\n    this.effectShaderQuad.material.uniforms['logDepth'].value = renderer.capabilities.logarithmicDepthBuffer\n    this.effectShaderQuad.material.uniforms['ortho'].value = this.camera.isOrthographicCamera\n    this.effectShaderQuad.material.uniforms['screenSpaceRadius'].value = this.configuration.screenSpaceRadius\n    // Start the AO\n    renderer.setRenderTarget(this.writeTargetInternal)\n    this.effectShaderQuad.render(renderer)\n    // End the AO\n    // Start the blur\n    for (let i = 0; i < this.configuration.denoiseIterations; i++) {\n      ;[this.writeTargetInternal, this.readTargetInternal] = [this.readTargetInternal, this.writeTargetInternal]\n      this.poissonBlurQuad.material.uniforms['tDiffuse'].value = this.readTargetInternal.texture\n      this.poissonBlurQuad.material.uniforms['sceneDepth'].value = this.configuration.halfRes\n        ? this.depthDownsampleTarget.texture[0]\n        : this.depthTexture\n      this.poissonBlurQuad.material.uniforms['projMat'].value = this.camera.projectionMatrix\n      this.poissonBlurQuad.material.uniforms['viewMat'].value = this.camera.matrixWorldInverse\n      this.poissonBlurQuad.material.uniforms['projectionMatrixInv'].value = this.camera.projectionMatrixInverse\n      this.poissonBlurQuad.material.uniforms['viewMatrixInv'].value = this.camera.matrixWorld\n      this.poissonBlurQuad.material.uniforms['cameraPos'].value = this.camera.getWorldPosition(new THREE.Vector3())\n      this.poissonBlurQuad.material.uniforms['resolution'].value = this.configuration.halfRes\n        ? this._r\n            .clone()\n            .multiplyScalar(1 / 2)\n            .floor()\n        : this._r\n      this.poissonBlurQuad.material.uniforms['time'].value = performance.now() / 1000\n      this.poissonBlurQuad.material.uniforms['blueNoise'].value = this.bluenoise\n      this.poissonBlurQuad.material.uniforms['radius'].value =\n        this.configuration.denoiseRadius * (this.configuration.halfRes ? 1 / 2 : 1)\n      this.poissonBlurQuad.material.uniforms['worldRadius'].value = trueRadius\n      this.poissonBlurQuad.material.uniforms['distanceFalloff'].value = this.configuration.distanceFalloff\n      this.poissonBlurQuad.material.uniforms['index'].value = i\n      this.poissonBlurQuad.material.uniforms['poissonDisk'].value = this.samplesDenoise\n      this.poissonBlurQuad.material.uniforms['near'].value = this.camera.near\n      this.poissonBlurQuad.material.uniforms['far'].value = this.camera.far\n      this.poissonBlurQuad.material.uniforms['logDepth'].value = renderer.capabilities.logarithmicDepthBuffer\n      this.poissonBlurQuad.material.uniforms['screenSpaceRadius'].value = this.configuration.screenSpaceRadius\n      renderer.setRenderTarget(this.writeTargetInternal)\n      this.poissonBlurQuad.render(renderer)\n    }\n    // Now, we have the blurred AO in writeTargetInternal\n    // End the blur\n    // Start the composition\n    this.effectCompositerQuad.material.uniforms['sceneDiffuse'].value = inputBuffer.texture\n    this.effectCompositerQuad.material.uniforms['sceneDepth'].value = this.depthTexture\n    this.effectCompositerQuad.material.uniforms['near'].value = this.camera.near\n    this.effectCompositerQuad.material.uniforms['far'].value = this.camera.far\n    this.effectCompositerQuad.material.uniforms['projectionMatrixInv'].value = this.camera.projectionMatrixInverse\n    this.effectCompositerQuad.material.uniforms['viewMatrixInv'].value = this.camera.matrixWorld\n    this.effectCompositerQuad.material.uniforms['logDepth'].value = renderer.capabilities.logarithmicDepthBuffer\n    this.effectCompositerQuad.material.uniforms['ortho'].value = this.camera.isOrthographicCamera\n    this.effectCompositerQuad.material.uniforms['downsampledDepth'].value = this.configuration.halfRes\n      ? this.depthDownsampleTarget.texture[0]\n      : this.depthTexture\n    this.effectCompositerQuad.material.uniforms['resolution'].value = this._r\n    this.effectCompositerQuad.material.uniforms['blueNoise'].value = this.bluenoise\n    this.effectCompositerQuad.material.uniforms['intensity'].value = this.configuration.intensity\n    this.effectCompositerQuad.material.uniforms['renderMode'].value = this.configuration.renderMode\n    this.effectCompositerQuad.material.uniforms['screenSpaceRadius'].value = this.configuration.screenSpaceRadius\n    this.effectCompositerQuad.material.uniforms['radius'].value = trueRadius\n    this.effectCompositerQuad.material.uniforms['distanceFalloff'].value = this.configuration.distanceFalloff\n    this.effectCompositerQuad.material.uniforms['gammaCorrection'].value = this.autosetGamma\n      ? this.renderToScreen\n      : this.configuration.gammaCorrection\n    this.effectCompositerQuad.material.uniforms['tDiffuse'].value = this.writeTargetInternal.texture\n    this.effectCompositerQuad.material.uniforms['color'].value = this._c\n      .copy(this.configuration.color)\n      .convertSRGBToLinear()\n    this.effectCompositerQuad.material.uniforms['colorMultiply'].value = this.configuration.colorMultiply\n    this.effectCompositerQuad.material.uniforms['cameraPos'].value = this.camera.getWorldPosition(new THREE.Vector3())\n    this.effectCompositerQuad.material.uniforms['fog'].value = !!this.scene.fog\n    if (this.scene.fog) {\n      if (this.scene.fog.isFog) {\n        this.effectCompositerQuad.material.uniforms['fogExp'].value = false\n        this.effectCompositerQuad.material.uniforms['fogNear'].value = this.scene.fog.near\n        this.effectCompositerQuad.material.uniforms['fogFar'].value = this.scene.fog.far\n      } else if (this.scene.fog.isFogExp2) {\n        this.effectCompositerQuad.material.uniforms['fogExp'].value = true\n        this.effectCompositerQuad.material.uniforms['fogDensity'].value = this.scene.fog.density\n      } else {\n        console.error(`Unsupported fog type ${this.scene.fog.constructor.name} in SSAOPass.`)\n      }\n    }\n    renderer.setRenderTarget(\n      /* this.renderToScreen ? null :\n                 outputBuffer*/\n      this.outputTargetInternal\n    )\n    this.effectCompositerQuad.render(renderer)\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer)\n    this.copyQuad.material.uniforms['tDiffuse'].value = this.outputTargetInternal.texture\n    this.copyQuad.render(renderer)\n    if (this.debugMode) {\n      gl.endQuery(ext.TIME_ELAPSED_EXT)\n      checkTimerQuery(timerQuery, gl, this)\n    }\n\n    renderer.xr.enabled = xrEnabled\n  }\n  /**\n   * Enables the debug mode of the AO, meaning the lastTime value will be updated.\n   */\n  enableDebugMode() {\n    this.debugMode = true\n  }\n  /**\n   * Disables the debug mode of the AO, meaning the lastTime value will not be updated.\n   */\n  disableDebugMode() {\n    this.debugMode = false\n  }\n  /**\n   * Sets the display mode of the AO\n   * @param {\"Combined\" | \"AO\" | \"No AO\" | \"Split\" | \"Split AO\"} mode - The display mode.\n   */\n  setDisplayMode(mode) {\n    this.configuration.renderMode = ['Combined', 'AO', 'No AO', 'Split', 'Split AO'].indexOf(mode)\n  }\n  /**\n   *\n   * @param {\"Performance\" | \"Low\" | \"Medium\" | \"High\" | \"Ultra\"} mode\n   */\n  setQualityMode(mode) {\n    if (mode === 'Performance') {\n      this.configuration.aoSamples = 8\n      this.configuration.denoiseSamples = 4\n      this.configuration.denoiseRadius = 12\n    } else if (mode === 'Low') {\n      this.configuration.aoSamples = 16\n      this.configuration.denoiseSamples = 4\n      this.configuration.denoiseRadius = 12\n    } else if (mode === 'Medium') {\n      this.configuration.aoSamples = 16\n      this.configuration.denoiseSamples = 8\n      this.configuration.denoiseRadius = 12\n    } else if (mode === 'High') {\n      this.configuration.aoSamples = 64\n      this.configuration.denoiseSamples = 8\n      this.configuration.denoiseRadius = 6\n    } else if (mode === 'Ultra') {\n      this.configuration.aoSamples = 64\n      this.configuration.denoiseSamples = 16\n      this.configuration.denoiseRadius = 6\n    }\n  }\n}\nexport { N8AOPostPass }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/kasaikazunobu/project/ai/babel/ripple/3d-ripple-animation/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport * as THREE from 'three';\nimport { Suspense, useCallback, useMemo, useRef } from 'react';\nimport { OrbitControls } from '@react-three/drei';\nimport { Canvas, useFrame, useLoader, useThree } from '@react-three/fiber';\nimport { AxesHelper, GridHelper } from 'three';\nimport circleImg from './assets/circle.png'; // テクスチャのインポート\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CameraControls() {\n  return /*#__PURE__*/_jsxDEV(OrbitControls, {\n    autoRotate: true,\n    autoRotateSpeed: -0.2\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n}\n\n// function CameraControls(){\n//   const {\n//     camera,\n//     gl: {domElement}\n//   } = useThree();\n\n//   const controlsRef = useRef();\n//   useFrame(() => controlsRef.current.update())\n\n//   return (\n//     <orbitControls\n//       ref={controlsRef}\n//       args={[camera, domElement]}\n//       autoRotate\n//       autoRotateSpeed={-0.2}\n//     />\n//   );\n// }\n_c = CameraControls;\nfunction MeshSurface() {\n  _s();\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const meshRef = useRef();\n  const tRef = useRef(0);\n  const speed = 2; // 波の速度\n  const frequency = 0.1; // 波の周波数\n  const amplitude = 2; // 波の振幅\n\n  useFrame((state, delta) => {\n    tRef.current += delta * speed;\n    const positions = meshRef.current.geometry.attributes.position.array;\n    const vertex = new THREE.Vector3();\n    for (let i = 0; i < positions.length; i += 3) {\n      vertex.fromArray(positions, i);\n      const distance = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      positions[i + 1] = Math.sin(distance * frequency - tRef.current) * amplitude;\n    }\n    meshRef.current.geometry.attributes.position.needsUpdate = true;\n    meshRef.current.geometry.computeVertexNormals();\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    rotation: [-Math.PI / 2, 0, 0],\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [300, 300, 100, 100]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: imgTex,\n      color: 0xFFFFFF,\n      side: THREE.DoubleSide,\n      wireframe: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(MeshSurface, \"81yg2XaPC+PuRivYvl7QlDoLyj4=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c2 = MeshSurface;\nfunction AnimationCanvas() {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    colorManagement: false,\n    camera: {\n      position: [0, 100, 200],\n      fov: 75\n    },\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: [/*#__PURE__*/_jsxDEV(MeshSurface, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10],\n        intensity: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"axesHelper\", {\n        args: [100]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"gridHelper\", {\n        args: [300, 30]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CameraControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n// function MeshSurface() {\n//   const imgTex = useLoader(THREE.TextureLoader, circleImg);\n//   const bufferRef = useRef();\n\n//   const tRef = useRef(0);\n//   const f = 0.002;\n//   const a = 1;\n\n//   const graph = useCallback(\n//     (x, z) => {\n//       return Math.sin(f * (x ** 2 + z ** 2 + tRef.current)) * a;\n//     },\n//     [f, a]\n//   );\n\n//   const count = 200;\n//   const sep = 1.5;\n\n//   const positions = useMemo(() => {\n//     const positions = [];\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         const y = graph(x, z);\n//         positions.push(x, y, z);\n//       }\n//     }\n//     return new Float32Array(positions);\n//   }, [count, sep, graph]);\n\n//   const indices = useMemo(() => {\n//     const indices = [];\n//     for (let xi = 0; xi < count - 1; xi++) {\n//       for (let zi = 0; zi < count - 1; zi++) {\n//         const a = xi * count + zi;\n//         const b = xi * count + zi + 1;\n//         const c = (xi + 1) * count + zi + 1;\n//         const d = (xi + 1) * count + zi;\n//         indices.push(a, b, d);\n//         indices.push(b, c, d);\n//       }\n//     }\n//     return new Uint16Array(indices);\n//   }, [count]);\n\n//   useFrame(() => {\n//     tRef.current += 15;\n//     const positionsArray = bufferRef.current.array;\n//     let i = 0;\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         positionsArray[i + 1] = graph(x, z);\n//         i += 3;\n//       }\n//     }\n//     bufferRef.current.needsUpdate = true;\n//   });\n\n//   return (\n//     <mesh>\n//       <bufferGeometry attach=\"geometry\">\n//         <bufferAttribute\n//           ref={bufferRef}\n//           attachObject={['attributes', 'position']}\n//           array={positions}\n//           count={positions.length / 3}\n//           itemSize={3}\n//         />\n//         <bufferAttribute\n//           attach=\"index\"\n//           array={indices}\n//           count={indices.length}\n//           itemSize={1}\n//         />\n//       </bufferGeometry>\n\n//       <meshStandardMaterial\n//         attach=\"material\"\n//         map={imgTex}\n//         color={0xFFFFFF}\n//         side={THREE.DoubleSide}\n//         wireframe={false}\n//       />\n//     </mesh>\n//   );\n// }\n// function AnimationCanvas() {\n//   return (\n//     <Canvas colorManagement={false} camera={{ position: [0, 100, 200], fov: 75 }}>\n//       <Suspense fallback={null}>\n//         <MeshSurface />\n//         <ambientLight intensity={0.5} />\n//         <pointLight position={[10, 10, 10]} intensity={1} />\n//         <axesHelper args={[100]} />\n//         <gridHelper args={[200, 20]} />\n//       </Suspense>\n//       <CameraControls />\n//     </Canvas>\n//   );\n// }\n_c3 = AnimationCanvas;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"anim\",\n    children: /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(AnimationCanvas, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CameraControls\");\n$RefreshReg$(_c2, \"MeshSurface\");\n$RefreshReg$(_c3, \"AnimationCanvas\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["THREE","Suspense","useCallback","useMemo","useRef","OrbitControls","Canvas","useFrame","useLoader","useThree","AxesHelper","GridHelper","circleImg","jsxDEV","_jsxDEV","CameraControls","autoRotate","autoRotateSpeed","fileName","_jsxFileName","lineNumber","columnNumber","_c","MeshSurface","_s","imgTex","TextureLoader","meshRef","tRef","speed","frequency","amplitude","state","delta","current","positions","geometry","attributes","position","array","vertex","Vector3","i","length","fromArray","distance","Math","sqrt","x","z","sin","needsUpdate","computeVertexNormals","ref","rotation","PI","children","args","map","color","side","DoubleSide","wireframe","_c2","AnimationCanvas","colorManagement","camera","fov","fallback","intensity","_c3","App","className","_c4","$RefreshReg$"],"sources":["/Users/kasaikazunobu/project/ai/babel/ripple/3d-ripple-animation/src/App.js"],"sourcesContent":["import './App.css';\nimport * as THREE from 'three';\nimport { Suspense, useCallback, useMemo, useRef } from 'react';\n\nimport { OrbitControls } from '@react-three/drei';\nimport { Canvas, useFrame, useLoader, useThree } from '@react-three/fiber';\n\nimport { AxesHelper, GridHelper } from 'three';\nimport circleImg from './assets/circle.png'; // テクスチャのインポート\n\nfunction CameraControls() {\n  return <OrbitControls autoRotate autoRotateSpeed={-0.2} />;\n}\n\n// function CameraControls(){\n//   const {\n//     camera,\n//     gl: {domElement}\n//   } = useThree();\n\n//   const controlsRef = useRef();\n//   useFrame(() => controlsRef.current.update())\n\n//   return (\n//     <orbitControls\n//       ref={controlsRef}\n//       args={[camera, domElement]}\n//       autoRotate\n//       autoRotateSpeed={-0.2}\n//     />\n//   );\n// }\n\nfunction MeshSurface() {\n  const imgTex = useLoader(THREE.TextureLoader, circleImg);\n  const meshRef = useRef();\n\n  const tRef = useRef(0);\n  const speed = 2; // 波の速度\n  const frequency = 0.1; // 波の周波数\n  const amplitude = 2; // 波の振幅\n\n  useFrame((state, delta) => {\n    tRef.current += delta * speed;\n\n    const positions = meshRef.current.geometry.attributes.position.array;\n    const vertex = new THREE.Vector3();\n\n    for (let i = 0; i < positions.length; i += 3) {\n      vertex.fromArray(positions, i);\n      const distance = Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z);\n      positions[i + 1] = Math.sin(distance * frequency - tRef.current) * amplitude;\n    }\n\n    meshRef.current.geometry.attributes.position.needsUpdate = true;\n    meshRef.current.geometry.computeVertexNormals();\n  });\n\n  return (\n    <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]}>\n      <planeGeometry args={[300, 300, 100, 100]} />\n      <meshStandardMaterial\n        map={imgTex}\n        color={0xFFFFFF}\n        side={THREE.DoubleSide}\n        wireframe={false}\n      />\n    </mesh>\n  );\n}\n\nfunction AnimationCanvas() {\n  return (\n    <Canvas\n      colorManagement={false}\n      camera={{ position: [0, 100, 200], fov: 75 }}\n    >\n      <Suspense fallback={null}>\n        <MeshSurface />\n        <ambientLight intensity={0.5} />\n        <pointLight position={[10, 10, 10]} intensity={1} />\n        <axesHelper args={[100]} />\n        <gridHelper args={[300, 30]} />\n      </Suspense>\n      <CameraControls />\n    </Canvas>\n  );\n}\n\n// function MeshSurface() {\n//   const imgTex = useLoader(THREE.TextureLoader, circleImg);\n//   const bufferRef = useRef();\n\n//   const tRef = useRef(0);\n//   const f = 0.002;\n//   const a = 1;\n\n//   const graph = useCallback(\n//     (x, z) => {\n//       return Math.sin(f * (x ** 2 + z ** 2 + tRef.current)) * a;\n//     },\n//     [f, a]\n//   );\n\n//   const count = 200;\n//   const sep = 1.5;\n\n//   const positions = useMemo(() => {\n//     const positions = [];\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         const y = graph(x, z);\n//         positions.push(x, y, z);\n//       }\n//     }\n//     return new Float32Array(positions);\n//   }, [count, sep, graph]);\n\n//   const indices = useMemo(() => {\n//     const indices = [];\n//     for (let xi = 0; xi < count - 1; xi++) {\n//       for (let zi = 0; zi < count - 1; zi++) {\n//         const a = xi * count + zi;\n//         const b = xi * count + zi + 1;\n//         const c = (xi + 1) * count + zi + 1;\n//         const d = (xi + 1) * count + zi;\n//         indices.push(a, b, d);\n//         indices.push(b, c, d);\n//       }\n//     }\n//     return new Uint16Array(indices);\n//   }, [count]);\n\n//   useFrame(() => {\n//     tRef.current += 15;\n//     const positionsArray = bufferRef.current.array;\n//     let i = 0;\n//     for (let xi = 0; xi < count; xi++) {\n//       for (let zi = 0; zi < count; zi++) {\n//         const x = sep * (xi - count / 2);\n//         const z = sep * (zi - count / 2);\n//         positionsArray[i + 1] = graph(x, z);\n//         i += 3;\n//       }\n//     }\n//     bufferRef.current.needsUpdate = true;\n//   });\n\n//   return (\n//     <mesh>\n//       <bufferGeometry attach=\"geometry\">\n//         <bufferAttribute\n//           ref={bufferRef}\n//           attachObject={['attributes', 'position']}\n//           array={positions}\n//           count={positions.length / 3}\n//           itemSize={3}\n//         />\n//         <bufferAttribute\n//           attach=\"index\"\n//           array={indices}\n//           count={indices.length}\n//           itemSize={1}\n//         />\n//       </bufferGeometry>\n\n//       <meshStandardMaterial\n//         attach=\"material\"\n//         map={imgTex}\n//         color={0xFFFFFF}\n//         side={THREE.DoubleSide}\n//         wireframe={false}\n//       />\n//     </mesh>\n//   );\n// }\n// function AnimationCanvas() {\n//   return (\n//     <Canvas colorManagement={false} camera={{ position: [0, 100, 200], fov: 75 }}>\n//       <Suspense fallback={null}>\n//         <MeshSurface />\n//         <ambientLight intensity={0.5} />\n//         <pointLight position={[10, 10, 10]} intensity={1} />\n//         <axesHelper args={[100]} />\n//         <gridHelper args={[200, 20]} />\n//       </Suspense>\n//       <CameraControls />\n//     </Canvas>\n//   );\n// }\n\n\n\nfunction App() {\n  return (\n    <div className=\"anim\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <AnimationCanvas />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
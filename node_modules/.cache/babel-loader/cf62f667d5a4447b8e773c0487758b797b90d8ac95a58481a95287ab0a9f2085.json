{"ast":null,"code":"import { Uniform } from \"three\";\nimport { Effect, EffectAttribute, BlendFunction } from \"postprocessing\";\nimport { wrapEffect } from \"../util.js\";\nconst WaterShader = {\n  fragmentShader: `\n  uniform float factor;\n  void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n    vec2 vUv = uv;\n    float frequency = 6.0 * factor;\n    float amplitude = 0.015 * factor;\n    float x = vUv.y * frequency + time * .7; \n    float y = vUv.x * frequency + time * .3;\n    vUv.x += cos(x+y) * amplitude * cos(y);\n    vUv.y += sin(x-y) * amplitude * cos(y);\n    vec4 rgba = texture2D(inputBuffer, vUv);\n    outputColor = rgba;\n  }`\n};\nclass WaterEffectImpl extends Effect {\n  constructor({\n    blendFunction = BlendFunction.NORMAL,\n    factor = 0\n  } = {}) {\n    super(\"WaterEffect\", WaterShader.fragmentShader, {\n      blendFunction,\n      attributes: EffectAttribute.CONVOLUTION,\n      uniforms: /* @__PURE__ */new Map([[\"factor\", new Uniform(factor)]])\n    });\n  }\n}\nconst WaterEffect = wrapEffect(WaterEffectImpl, {\n  blendFunction: BlendFunction.NORMAL\n});\nexport { WaterEffect, WaterEffectImpl };","map":{"version":3,"names":["WaterShader","fragmentShader","WaterEffectImpl","Effect","constructor","blendFunction","BlendFunction","NORMAL","factor","attributes","EffectAttribute","CONVOLUTION","uniforms","Map","Uniform","WaterEffect","wrapEffect"],"sources":["/Users/kasaikazunobu/project/babel/babel-project/node_modules/@react-three/postprocessing/src/effects/Water.tsx"],"sourcesContent":["import { Uniform } from 'three'\nimport { BlendFunction, Effect, EffectAttribute } from 'postprocessing'\nimport { wrapEffect } from '../util'\n\nconst WaterShader = {\n  fragmentShader: `\n  uniform float factor;\n  void mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n    vec2 vUv = uv;\n    float frequency = 6.0 * factor;\n    float amplitude = 0.015 * factor;\n    float x = vUv.y * frequency + time * .7; \n    float y = vUv.x * frequency + time * .3;\n    vUv.x += cos(x+y) * amplitude * cos(y);\n    vUv.y += sin(x-y) * amplitude * cos(y);\n    vec4 rgba = texture2D(inputBuffer, vUv);\n    outputColor = rgba;\n  }`\n}\n\nexport class WaterEffectImpl extends Effect {\n  constructor({ blendFunction = BlendFunction.NORMAL, factor = 0 } = {}) {\n    super('WaterEffect', WaterShader.fragmentShader, {\n      blendFunction,\n      attributes: EffectAttribute.CONVOLUTION,\n      uniforms: new Map<string, Uniform<number | number[]>>([['factor', new Uniform(factor)]])\n    })\n  }\n}\n\nexport const WaterEffect = wrapEffect(WaterEffectImpl, { blendFunction: BlendFunction.NORMAL })\n"],"mappings":";;;AAIA,MAAMA,WAAA,GAAc;EAClBC,cAAA,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAalB;AAEO,MAAMC,eAAA,SAAwBC,MAAA,CAAO;EAC1CC,YAAY;IAAEC,aAAA,GAAgBC,aAAA,CAAcC,MAAA;IAAQC,MAAA,GAAS;EAAM,QAAI;IAC/D,qBAAeR,WAAA,CAAYC,cAAA,EAAgB;MAC/CI,aAAA;MACAI,UAAA,EAAYC,eAAA,CAAgBC,WAAA;MAC5BC,QAAA,EAAc,mBAAAC,GAAA,CAAwC,CAAC,CAAC,UAAU,IAAIC,OAAA,CAAQN,MAAM,CAAC,CAAC,CAAC;IAAA,CACxF;EACH;AACF;AAEO,MAAMO,WAAA,GAAcC,UAAA,CAAWd,eAAA,EAAiB;EAAEG,aAAA,EAAeC,aAAA,CAAcC;AAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}